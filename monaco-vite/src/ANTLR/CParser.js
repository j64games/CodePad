// Generated from C.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import CListener from './CListener.js';
const serializedATN = [4,1,120,1113,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,1,0,1,0,1,0,4,0,180,8,0,11,0,12,0,181,1,0,1,0,1,
0,1,0,1,0,1,0,3,0,190,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,210,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,
2,1,2,5,2,222,8,2,10,2,12,2,225,9,2,1,3,1,3,3,3,229,8,3,1,3,1,3,1,3,1,4,
1,4,3,4,236,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,244,8,4,1,4,1,4,3,4,248,8,4,
1,4,1,4,1,4,1,4,1,4,1,4,3,4,256,8,4,1,4,1,4,1,4,1,4,1,4,5,4,263,8,4,10,4,
12,4,266,9,4,1,5,1,5,1,5,5,5,271,8,5,10,5,12,5,274,9,5,1,6,5,6,277,8,6,10,
6,12,6,280,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,293,8,6,1,
7,1,7,1,8,3,8,298,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,307,8,8,1,9,1,9,1,
9,5,9,312,8,9,10,9,12,9,315,9,9,1,10,1,10,1,10,5,10,320,8,10,10,10,12,10,
323,9,10,1,11,1,11,1,11,5,11,328,8,11,10,11,12,11,331,9,11,1,12,1,12,1,12,
5,12,336,8,12,10,12,12,12,339,9,12,1,13,1,13,1,13,5,13,344,8,13,10,13,12,
13,347,9,13,1,14,1,14,1,14,5,14,352,8,14,10,14,12,14,355,9,14,1,15,1,15,
1,15,5,15,360,8,15,10,15,12,15,363,9,15,1,16,1,16,1,16,5,16,368,8,16,10,
16,12,16,371,9,16,1,17,1,17,1,17,5,17,376,8,17,10,17,12,17,379,9,17,1,18,
1,18,1,18,5,18,384,8,18,10,18,12,18,387,9,18,1,19,1,19,1,19,1,19,1,19,1,
19,3,19,395,8,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,403,8,20,1,21,1,21,1,
22,1,22,1,22,5,22,410,8,22,10,22,12,22,413,9,22,1,23,1,23,1,24,1,24,3,24,
419,8,24,1,24,1,24,1,24,3,24,424,8,24,1,25,4,25,427,8,25,11,25,12,25,428,
1,26,4,26,432,8,26,11,26,12,26,433,1,27,1,27,1,27,1,27,1,27,3,27,441,8,27,
1,28,1,28,1,28,5,28,446,8,28,10,28,12,28,449,9,28,1,29,1,29,1,29,3,29,454,
8,29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
1,31,3,31,485,8,31,1,32,1,32,3,32,489,8,32,1,32,1,32,1,32,1,32,1,32,1,32,
1,32,3,32,498,8,32,1,33,1,33,1,34,4,34,503,8,34,11,34,12,34,504,1,35,1,35,
1,35,1,35,1,35,1,35,1,35,1,35,3,35,515,8,35,1,36,1,36,3,36,519,8,36,1,36,
3,36,522,8,36,1,37,1,37,1,37,5,37,527,8,37,10,37,12,37,530,9,37,1,38,1,38,
3,38,534,8,38,1,38,1,38,3,38,538,8,38,1,39,1,39,3,39,542,8,39,1,39,1,39,
1,39,3,39,547,8,39,1,39,1,39,1,39,1,39,3,39,553,8,39,1,40,1,40,1,40,5,40,
558,8,40,10,40,12,40,561,9,40,1,41,1,41,1,41,3,41,566,8,41,1,42,1,42,1,43,
1,43,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
45,3,45,586,8,45,1,46,1,46,1,46,1,46,3,46,592,8,46,1,46,1,46,1,47,3,47,597,
8,47,1,47,1,47,5,47,601,8,47,10,47,12,47,604,9,47,1,48,1,48,1,48,1,48,1,
48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,623,
8,48,1,48,1,48,1,48,3,48,628,8,48,1,48,3,48,631,8,48,1,48,1,48,1,48,1,48,
1,48,3,48,638,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
1,48,1,48,3,48,653,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
3,48,665,8,48,1,48,5,48,668,8,48,10,48,12,48,671,9,48,1,49,1,49,1,50,1,50,
1,50,4,50,678,8,50,11,50,12,50,679,1,50,1,50,3,50,684,8,50,1,51,1,51,1,51,
1,51,1,51,1,51,1,51,1,52,3,52,694,8,52,1,52,1,52,3,52,698,8,52,5,52,700,
8,52,10,52,12,52,703,9,52,1,53,1,53,1,53,3,53,708,8,53,1,53,3,53,711,8,53,
1,54,1,54,1,54,1,54,1,54,5,54,718,8,54,10,54,12,54,721,9,54,1,55,1,55,3,
55,725,8,55,4,55,727,8,55,11,55,12,55,728,1,56,4,56,732,8,56,11,56,12,56,
733,1,57,1,57,1,57,3,57,739,8,57,1,58,1,58,1,58,5,58,744,8,58,10,58,12,58,
747,9,58,1,59,1,59,1,59,1,59,1,59,3,59,754,8,59,3,59,756,8,59,1,60,1,60,
1,60,5,60,761,8,60,10,60,12,60,764,9,60,1,61,1,61,3,61,768,8,61,1,62,1,62,
3,62,772,8,62,1,62,1,62,5,62,776,8,62,10,62,12,62,779,9,62,3,62,781,8,62,
1,63,1,63,1,63,1,63,1,63,5,63,788,8,63,10,63,12,63,791,9,63,1,63,1,63,3,
63,795,8,63,1,63,3,63,798,8,63,1,63,1,63,1,63,1,63,3,63,804,8,63,1,63,1,
63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,820,
8,63,1,63,1,63,5,63,824,8,63,10,63,12,63,827,9,63,3,63,829,8,63,1,63,1,63,
1,63,3,63,834,8,63,1,63,3,63,837,8,63,1,63,1,63,1,63,1,63,1,63,3,63,844,
8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
63,1,63,1,63,1,63,3,63,863,8,63,1,63,1,63,5,63,867,8,63,10,63,12,63,870,
9,63,5,63,872,8,63,10,63,12,63,875,9,63,1,64,1,64,1,65,1,65,1,65,1,65,3,
65,883,8,65,1,65,1,65,3,65,887,8,65,1,66,3,66,890,8,66,1,66,1,66,1,66,3,
66,895,8,66,1,66,5,66,898,8,66,10,66,12,66,901,9,66,1,67,1,67,1,67,1,68,
4,68,907,8,68,11,68,12,68,908,1,69,1,69,1,69,1,69,1,69,1,69,3,69,917,8,69,
1,70,1,70,1,70,1,70,1,70,4,70,924,8,70,11,70,12,70,925,1,70,1,70,1,70,1,
71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,943,8,71,
10,71,12,71,946,9,71,3,71,948,8,71,1,71,1,71,1,71,1,71,5,71,954,8,71,10,
71,12,71,957,9,71,3,71,959,8,71,5,71,961,8,71,10,71,12,71,964,9,71,1,71,
1,71,3,71,968,8,71,1,72,1,72,1,72,3,72,973,8,72,1,72,1,72,1,72,1,72,1,72,
1,72,1,72,1,72,3,72,983,8,72,1,73,1,73,3,73,987,8,73,1,73,1,73,1,74,4,74,
992,8,74,11,74,12,74,993,1,75,1,75,3,75,998,8,75,1,76,3,76,1001,8,76,1,76,
1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1012,8,77,1,77,1,77,1,77,1,
77,1,77,1,77,3,77,1020,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1042,8,78,1,
79,1,79,3,79,1046,8,79,3,79,1048,8,79,1,79,1,79,3,79,1052,8,79,1,79,1,79,
3,79,1056,8,79,1,80,1,80,3,80,1060,8,80,1,81,1,81,1,81,5,81,1065,8,81,10,
81,12,81,1068,9,81,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1076,8,82,1,82,1,82,
3,82,1080,8,82,1,82,1,82,1,83,3,83,1085,8,83,1,83,1,83,1,84,4,84,1090,8,
84,11,84,12,84,1091,1,85,1,85,1,85,3,85,1097,8,85,1,86,3,86,1100,8,86,1,
86,1,86,3,86,1104,8,86,1,86,1,86,1,87,4,87,1109,8,87,11,87,12,87,1110,1,
87,0,2,96,126,88,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
164,166,168,170,172,174,0,20,1,0,107,108,3,0,44,44,77,77,79,79,2,0,44,44,
55,55,5,0,76,76,78,78,80,80,83,83,88,89,1,0,80,82,2,0,76,76,78,78,1,0,74,
75,1,0,70,73,1,0,105,106,1,0,94,104,6,0,20,20,31,31,39,39,45,45,48,48,63,
63,1,0,4,6,2,0,46,46,49,49,4,0,24,24,40,40,52,52,56,56,2,0,9,9,11,15,2,0,
64,65,93,93,1,0,64,65,2,0,80,80,87,87,2,0,16,16,18,18,2,0,19,19,52,52,1223,
0,209,1,0,0,0,2,211,1,0,0,0,4,218,1,0,0,0,6,228,1,0,0,0,8,247,1,0,0,0,10,
267,1,0,0,0,12,278,1,0,0,0,14,294,1,0,0,0,16,306,1,0,0,0,18,308,1,0,0,0,
20,316,1,0,0,0,22,324,1,0,0,0,24,332,1,0,0,0,26,340,1,0,0,0,28,348,1,0,0,
0,30,356,1,0,0,0,32,364,1,0,0,0,34,372,1,0,0,0,36,380,1,0,0,0,38,388,1,0,
0,0,40,402,1,0,0,0,42,404,1,0,0,0,44,406,1,0,0,0,46,414,1,0,0,0,48,423,1,
0,0,0,50,426,1,0,0,0,52,431,1,0,0,0,54,440,1,0,0,0,56,442,1,0,0,0,58,450,
1,0,0,0,60,455,1,0,0,0,62,484,1,0,0,0,64,497,1,0,0,0,66,499,1,0,0,0,68,502,
1,0,0,0,70,514,1,0,0,0,72,518,1,0,0,0,74,523,1,0,0,0,76,537,1,0,0,0,78,552,
1,0,0,0,80,554,1,0,0,0,82,562,1,0,0,0,84,567,1,0,0,0,86,569,1,0,0,0,88,574,
1,0,0,0,90,585,1,0,0,0,92,587,1,0,0,0,94,596,1,0,0,0,96,622,1,0,0,0,98,672,
1,0,0,0,100,683,1,0,0,0,102,685,1,0,0,0,104,693,1,0,0,0,106,704,1,0,0,0,
108,719,1,0,0,0,110,726,1,0,0,0,112,731,1,0,0,0,114,735,1,0,0,0,116,740,
1,0,0,0,118,755,1,0,0,0,120,757,1,0,0,0,122,765,1,0,0,0,124,780,1,0,0,0,
126,828,1,0,0,0,128,876,1,0,0,0,130,886,1,0,0,0,132,889,1,0,0,0,134,902,
1,0,0,0,136,906,1,0,0,0,138,916,1,0,0,0,140,918,1,0,0,0,142,967,1,0,0,0,
144,982,1,0,0,0,146,984,1,0,0,0,148,991,1,0,0,0,150,997,1,0,0,0,152,1000,
1,0,0,0,154,1019,1,0,0,0,156,1041,1,0,0,0,158,1047,1,0,0,0,160,1057,1,0,
0,0,162,1061,1,0,0,0,164,1079,1,0,0,0,166,1084,1,0,0,0,168,1089,1,0,0,0,
170,1096,1,0,0,0,172,1099,1,0,0,0,174,1108,1,0,0,0,176,210,5,110,0,0,177,
210,5,111,0,0,178,180,5,113,0,0,179,178,1,0,0,0,180,181,1,0,0,0,181,179,
1,0,0,0,181,182,1,0,0,0,182,210,1,0,0,0,183,184,5,64,0,0,184,185,3,44,22,
0,185,186,5,65,0,0,186,210,1,0,0,0,187,210,3,2,1,0,188,190,5,1,0,0,189,188,
1,0,0,0,189,190,1,0,0,0,190,191,1,0,0,0,191,192,5,64,0,0,192,193,3,146,73,
0,193,194,5,65,0,0,194,210,1,0,0,0,195,196,5,2,0,0,196,197,5,64,0,0,197,
198,3,12,6,0,198,199,5,93,0,0,199,200,3,122,61,0,200,201,5,65,0,0,201,210,
1,0,0,0,202,203,5,3,0,0,203,204,5,64,0,0,204,205,3,122,61,0,205,206,5,93,
0,0,206,207,3,12,6,0,207,208,5,65,0,0,208,210,1,0,0,0,209,176,1,0,0,0,209,
177,1,0,0,0,209,179,1,0,0,0,209,183,1,0,0,0,209,187,1,0,0,0,209,189,1,0,
0,0,209,195,1,0,0,0,209,202,1,0,0,0,210,1,1,0,0,0,211,212,5,59,0,0,212,213,
5,64,0,0,213,214,3,40,20,0,214,215,5,93,0,0,215,216,3,4,2,0,216,217,5,65,
0,0,217,3,1,0,0,0,218,223,3,6,3,0,219,220,5,93,0,0,220,222,3,6,3,0,221,219,
1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,5,1,0,0,0,225,
223,1,0,0,0,226,229,3,122,61,0,227,229,5,26,0,0,228,226,1,0,0,0,228,227,
1,0,0,0,229,230,1,0,0,0,230,231,5,91,0,0,231,232,3,40,20,0,232,7,1,0,0,0,
233,248,3,0,0,0,234,236,5,1,0,0,235,234,1,0,0,0,235,236,1,0,0,0,236,237,
1,0,0,0,237,238,5,64,0,0,238,239,3,122,61,0,239,240,5,65,0,0,240,241,5,68,
0,0,241,243,3,132,66,0,242,244,5,93,0,0,243,242,1,0,0,0,243,244,1,0,0,0,
244,245,1,0,0,0,245,246,5,69,0,0,246,248,1,0,0,0,247,233,1,0,0,0,247,235,
1,0,0,0,248,264,1,0,0,0,249,250,5,66,0,0,250,251,3,44,22,0,251,252,5,67,
0,0,252,263,1,0,0,0,253,255,5,64,0,0,254,256,3,10,5,0,255,254,1,0,0,0,255,
256,1,0,0,0,256,257,1,0,0,0,257,263,5,65,0,0,258,259,7,0,0,0,259,263,5,110,
0,0,260,263,5,77,0,0,261,263,5,79,0,0,262,249,1,0,0,0,262,253,1,0,0,0,262,
258,1,0,0,0,262,260,1,0,0,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,
0,0,264,265,1,0,0,0,265,9,1,0,0,0,266,264,1,0,0,0,267,272,3,40,20,0,268,
269,5,93,0,0,269,271,3,40,20,0,270,268,1,0,0,0,271,274,1,0,0,0,272,270,1,
0,0,0,272,273,1,0,0,0,273,11,1,0,0,0,274,272,1,0,0,0,275,277,7,1,0,0,276,
275,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,292,1,0,
0,0,280,278,1,0,0,0,281,293,3,8,4,0,282,283,3,14,7,0,283,284,3,16,8,0,284,
293,1,0,0,0,285,286,7,2,0,0,286,287,5,64,0,0,287,288,3,122,61,0,288,289,
5,65,0,0,289,293,1,0,0,0,290,291,5,85,0,0,291,293,5,110,0,0,292,281,1,0,
0,0,292,282,1,0,0,0,292,285,1,0,0,0,292,290,1,0,0,0,293,13,1,0,0,0,294,295,
7,3,0,0,295,15,1,0,0,0,296,298,5,1,0,0,297,296,1,0,0,0,297,298,1,0,0,0,298,
299,1,0,0,0,299,300,5,64,0,0,300,301,3,122,61,0,301,302,5,65,0,0,302,303,
3,16,8,0,303,307,1,0,0,0,304,307,3,12,6,0,305,307,5,112,0,0,306,297,1,0,
0,0,306,304,1,0,0,0,306,305,1,0,0,0,307,17,1,0,0,0,308,313,3,16,8,0,309,
310,7,4,0,0,310,312,3,16,8,0,311,309,1,0,0,0,312,315,1,0,0,0,313,311,1,0,
0,0,313,314,1,0,0,0,314,19,1,0,0,0,315,313,1,0,0,0,316,321,3,18,9,0,317,
318,7,5,0,0,318,320,3,18,9,0,319,317,1,0,0,0,320,323,1,0,0,0,321,319,1,0,
0,0,321,322,1,0,0,0,322,21,1,0,0,0,323,321,1,0,0,0,324,329,3,20,10,0,325,
326,7,6,0,0,326,328,3,20,10,0,327,325,1,0,0,0,328,331,1,0,0,0,329,327,1,
0,0,0,329,330,1,0,0,0,330,23,1,0,0,0,331,329,1,0,0,0,332,337,3,22,11,0,333,
334,7,7,0,0,334,336,3,22,11,0,335,333,1,0,0,0,336,339,1,0,0,0,337,335,1,
0,0,0,337,338,1,0,0,0,338,25,1,0,0,0,339,337,1,0,0,0,340,345,3,24,12,0,341,
342,7,8,0,0,342,344,3,24,12,0,343,341,1,0,0,0,344,347,1,0,0,0,345,343,1,
0,0,0,345,346,1,0,0,0,346,27,1,0,0,0,347,345,1,0,0,0,348,353,3,26,13,0,349,
350,5,83,0,0,350,352,3,26,13,0,351,349,1,0,0,0,352,355,1,0,0,0,353,351,1,
0,0,0,353,354,1,0,0,0,354,29,1,0,0,0,355,353,1,0,0,0,356,361,3,28,14,0,357,
358,5,87,0,0,358,360,3,28,14,0,359,357,1,0,0,0,360,363,1,0,0,0,361,359,1,
0,0,0,361,362,1,0,0,0,362,31,1,0,0,0,363,361,1,0,0,0,364,369,3,30,15,0,365,
366,5,84,0,0,366,368,3,30,15,0,367,365,1,0,0,0,368,371,1,0,0,0,369,367,1,
0,0,0,369,370,1,0,0,0,370,33,1,0,0,0,371,369,1,0,0,0,372,377,3,32,16,0,373,
374,5,85,0,0,374,376,3,32,16,0,375,373,1,0,0,0,376,379,1,0,0,0,377,375,1,
0,0,0,377,378,1,0,0,0,378,35,1,0,0,0,379,377,1,0,0,0,380,385,3,34,17,0,381,
382,5,86,0,0,382,384,3,34,17,0,383,381,1,0,0,0,384,387,1,0,0,0,385,383,1,
0,0,0,385,386,1,0,0,0,386,37,1,0,0,0,387,385,1,0,0,0,388,394,3,36,18,0,389,
390,5,90,0,0,390,391,3,44,22,0,391,392,5,91,0,0,392,393,3,38,19,0,393,395,
1,0,0,0,394,389,1,0,0,0,394,395,1,0,0,0,395,39,1,0,0,0,396,403,3,38,19,0,
397,398,3,12,6,0,398,399,3,42,21,0,399,400,3,40,20,0,400,403,1,0,0,0,401,
403,5,112,0,0,402,396,1,0,0,0,402,397,1,0,0,0,402,401,1,0,0,0,403,41,1,0,
0,0,404,405,7,9,0,0,405,43,1,0,0,0,406,411,3,40,20,0,407,408,5,93,0,0,408,
410,3,40,20,0,409,407,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,1,
0,0,0,412,45,1,0,0,0,413,411,1,0,0,0,414,415,3,38,19,0,415,47,1,0,0,0,416,
418,3,50,25,0,417,419,3,56,28,0,418,417,1,0,0,0,418,419,1,0,0,0,419,420,
1,0,0,0,420,421,5,92,0,0,421,424,1,0,0,0,422,424,3,140,70,0,423,416,1,0,
0,0,423,422,1,0,0,0,424,49,1,0,0,0,425,427,3,54,27,0,426,425,1,0,0,0,427,
428,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,51,1,0,0,0,430,432,3,54,
27,0,431,430,1,0,0,0,432,433,1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,
53,1,0,0,0,435,441,3,60,30,0,436,441,3,62,31,0,437,441,3,88,44,0,438,441,
3,90,45,0,439,441,3,92,46,0,440,435,1,0,0,0,440,436,1,0,0,0,440,437,1,0,
0,0,440,438,1,0,0,0,440,439,1,0,0,0,441,55,1,0,0,0,442,447,3,58,29,0,443,
444,5,93,0,0,444,446,3,58,29,0,445,443,1,0,0,0,446,449,1,0,0,0,447,445,1,
0,0,0,447,448,1,0,0,0,448,57,1,0,0,0,449,447,1,0,0,0,450,453,3,94,47,0,451,
452,5,94,0,0,452,454,3,130,65,0,453,451,1,0,0,0,453,454,1,0,0,0,454,59,1,
0,0,0,455,456,7,10,0,0,456,61,1,0,0,0,457,485,5,51,0,0,458,485,5,23,0,0,
459,485,5,42,0,0,460,485,5,37,0,0,461,485,5,38,0,0,462,485,5,32,0,0,463,
485,5,28,0,0,464,485,5,43,0,0,465,485,5,50,0,0,466,485,5,57,0,0,467,485,
5,58,0,0,468,485,5,4,0,0,469,485,5,5,0,0,470,485,5,6,0,0,471,472,5,1,0,0,
472,473,5,64,0,0,473,474,7,11,0,0,474,485,5,65,0,0,475,485,3,86,43,0,476,
485,3,64,32,0,477,485,3,78,39,0,478,485,3,128,64,0,479,480,5,7,0,0,480,481,
5,64,0,0,481,482,3,46,23,0,482,483,5,65,0,0,483,485,1,0,0,0,484,457,1,0,
0,0,484,458,1,0,0,0,484,459,1,0,0,0,484,460,1,0,0,0,484,461,1,0,0,0,484,
462,1,0,0,0,484,463,1,0,0,0,484,464,1,0,0,0,484,465,1,0,0,0,484,466,1,0,
0,0,484,467,1,0,0,0,484,468,1,0,0,0,484,469,1,0,0,0,484,470,1,0,0,0,484,
471,1,0,0,0,484,475,1,0,0,0,484,476,1,0,0,0,484,477,1,0,0,0,484,478,1,0,
0,0,484,479,1,0,0,0,485,63,1,0,0,0,486,488,3,66,33,0,487,489,5,110,0,0,488,
487,1,0,0,0,488,489,1,0,0,0,489,490,1,0,0,0,490,491,5,68,0,0,491,492,3,68,
34,0,492,493,5,69,0,0,493,498,1,0,0,0,494,495,3,66,33,0,495,496,5,110,0,
0,496,498,1,0,0,0,497,486,1,0,0,0,497,494,1,0,0,0,498,65,1,0,0,0,499,500,
7,12,0,0,500,67,1,0,0,0,501,503,3,70,35,0,502,501,1,0,0,0,503,504,1,0,0,
0,504,502,1,0,0,0,504,505,1,0,0,0,505,69,1,0,0,0,506,507,3,72,36,0,507,508,
3,74,37,0,508,509,5,92,0,0,509,515,1,0,0,0,510,511,3,72,36,0,511,512,5,92,
0,0,512,515,1,0,0,0,513,515,3,140,70,0,514,506,1,0,0,0,514,510,1,0,0,0,514,
513,1,0,0,0,515,71,1,0,0,0,516,519,3,62,31,0,517,519,3,88,44,0,518,516,1,
0,0,0,518,517,1,0,0,0,519,521,1,0,0,0,520,522,3,72,36,0,521,520,1,0,0,0,
521,522,1,0,0,0,522,73,1,0,0,0,523,528,3,76,38,0,524,525,5,93,0,0,525,527,
3,76,38,0,526,524,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,
0,529,75,1,0,0,0,530,528,1,0,0,0,531,538,3,94,47,0,532,534,3,94,47,0,533,
532,1,0,0,0,533,534,1,0,0,0,534,535,1,0,0,0,535,536,5,91,0,0,536,538,3,46,
23,0,537,531,1,0,0,0,537,533,1,0,0,0,538,77,1,0,0,0,539,541,5,30,0,0,540,
542,5,110,0,0,541,540,1,0,0,0,541,542,1,0,0,0,542,543,1,0,0,0,543,544,5,
68,0,0,544,546,3,80,40,0,545,547,5,93,0,0,546,545,1,0,0,0,546,547,1,0,0,
0,547,548,1,0,0,0,548,549,5,69,0,0,549,553,1,0,0,0,550,551,5,30,0,0,551,
553,5,110,0,0,552,539,1,0,0,0,552,550,1,0,0,0,553,79,1,0,0,0,554,559,3,82,
41,0,555,556,5,93,0,0,556,558,3,82,41,0,557,555,1,0,0,0,558,561,1,0,0,0,
559,557,1,0,0,0,559,560,1,0,0,0,560,81,1,0,0,0,561,559,1,0,0,0,562,565,3,
84,42,0,563,564,5,94,0,0,564,566,3,46,23,0,565,563,1,0,0,0,565,566,1,0,0,
0,566,83,1,0,0,0,567,568,5,110,0,0,568,85,1,0,0,0,569,570,5,56,0,0,570,571,
5,64,0,0,571,572,3,122,61,0,572,573,5,65,0,0,573,87,1,0,0,0,574,575,7,13,
0,0,575,89,1,0,0,0,576,586,5,36,0,0,577,586,5,61,0,0,578,586,5,8,0,0,579,
586,5,9,0,0,580,586,3,102,51,0,581,582,5,10,0,0,582,583,5,64,0,0,583,584,
5,110,0,0,584,586,5,65,0,0,585,576,1,0,0,0,585,577,1,0,0,0,585,578,1,0,0,
0,585,579,1,0,0,0,585,580,1,0,0,0,585,581,1,0,0,0,586,91,1,0,0,0,587,588,
5,54,0,0,588,591,5,64,0,0,589,592,3,122,61,0,590,592,3,46,23,0,591,589,1,
0,0,0,591,590,1,0,0,0,592,593,1,0,0,0,593,594,5,65,0,0,594,93,1,0,0,0,595,
597,3,110,55,0,596,595,1,0,0,0,596,597,1,0,0,0,597,598,1,0,0,0,598,602,3,
96,48,0,599,601,3,100,50,0,600,599,1,0,0,0,601,604,1,0,0,0,602,600,1,0,0,
0,602,603,1,0,0,0,603,95,1,0,0,0,604,602,1,0,0,0,605,606,6,48,-1,0,606,623,
5,110,0,0,607,608,5,64,0,0,608,609,3,94,47,0,609,610,5,65,0,0,610,623,1,
0,0,0,611,612,5,110,0,0,612,613,5,91,0,0,613,623,5,112,0,0,614,615,3,98,
49,0,615,616,5,110,0,0,616,623,1,0,0,0,617,618,5,64,0,0,618,619,3,98,49,
0,619,620,3,94,47,0,620,621,5,65,0,0,621,623,1,0,0,0,622,605,1,0,0,0,622,
607,1,0,0,0,622,611,1,0,0,0,622,614,1,0,0,0,622,617,1,0,0,0,623,669,1,0,
0,0,624,625,10,9,0,0,625,627,5,66,0,0,626,628,3,112,56,0,627,626,1,0,0,0,
627,628,1,0,0,0,628,630,1,0,0,0,629,631,3,40,20,0,630,629,1,0,0,0,630,631,
1,0,0,0,631,632,1,0,0,0,632,668,5,67,0,0,633,634,10,8,0,0,634,635,5,66,0,
0,635,637,5,45,0,0,636,638,3,112,56,0,637,636,1,0,0,0,637,638,1,0,0,0,638,
639,1,0,0,0,639,640,3,40,20,0,640,641,5,67,0,0,641,668,1,0,0,0,642,643,10,
7,0,0,643,644,5,66,0,0,644,645,3,112,56,0,645,646,5,45,0,0,646,647,3,40,
20,0,647,648,5,67,0,0,648,668,1,0,0,0,649,650,10,6,0,0,650,652,5,66,0,0,
651,653,3,112,56,0,652,651,1,0,0,0,652,653,1,0,0,0,653,654,1,0,0,0,654,655,
5,80,0,0,655,668,5,67,0,0,656,657,10,5,0,0,657,658,5,64,0,0,658,659,3,114,
57,0,659,660,5,65,0,0,660,668,1,0,0,0,661,662,10,4,0,0,662,664,5,64,0,0,
663,665,3,120,60,0,664,663,1,0,0,0,664,665,1,0,0,0,665,666,1,0,0,0,666,668,
5,65,0,0,667,624,1,0,0,0,667,633,1,0,0,0,667,642,1,0,0,0,667,649,1,0,0,0,
667,656,1,0,0,0,667,661,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,669,670,
1,0,0,0,670,97,1,0,0,0,671,669,1,0,0,0,672,673,7,14,0,0,673,99,1,0,0,0,674,
675,5,16,0,0,675,677,5,64,0,0,676,678,5,113,0,0,677,676,1,0,0,0,678,679,
1,0,0,0,679,677,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,684,5,65,0,0,
682,684,3,102,51,0,683,674,1,0,0,0,683,682,1,0,0,0,684,101,1,0,0,0,685,686,
5,17,0,0,686,687,5,64,0,0,687,688,5,64,0,0,688,689,3,104,52,0,689,690,5,
65,0,0,690,691,5,65,0,0,691,103,1,0,0,0,692,694,3,106,53,0,693,692,1,0,0,
0,693,694,1,0,0,0,694,701,1,0,0,0,695,697,5,93,0,0,696,698,3,106,53,0,697,
696,1,0,0,0,697,698,1,0,0,0,698,700,1,0,0,0,699,695,1,0,0,0,700,703,1,0,
0,0,701,699,1,0,0,0,701,702,1,0,0,0,702,105,1,0,0,0,703,701,1,0,0,0,704,
710,8,15,0,0,705,707,5,64,0,0,706,708,3,10,5,0,707,706,1,0,0,0,707,708,1,
0,0,0,708,709,1,0,0,0,709,711,5,65,0,0,710,705,1,0,0,0,710,711,1,0,0,0,711,
107,1,0,0,0,712,718,8,16,0,0,713,714,5,64,0,0,714,715,3,108,54,0,715,716,
5,65,0,0,716,718,1,0,0,0,717,712,1,0,0,0,717,713,1,0,0,0,718,721,1,0,0,0,
719,717,1,0,0,0,719,720,1,0,0,0,720,109,1,0,0,0,721,719,1,0,0,0,722,724,
7,17,0,0,723,725,3,112,56,0,724,723,1,0,0,0,724,725,1,0,0,0,725,727,1,0,
0,0,726,722,1,0,0,0,727,728,1,0,0,0,728,726,1,0,0,0,728,729,1,0,0,0,729,
111,1,0,0,0,730,732,3,88,44,0,731,730,1,0,0,0,732,733,1,0,0,0,733,731,1,
0,0,0,733,734,1,0,0,0,734,113,1,0,0,0,735,738,3,116,58,0,736,737,5,93,0,
0,737,739,5,109,0,0,738,736,1,0,0,0,738,739,1,0,0,0,739,115,1,0,0,0,740,
745,3,118,59,0,741,742,5,93,0,0,742,744,3,118,59,0,743,741,1,0,0,0,744,747,
1,0,0,0,745,743,1,0,0,0,745,746,1,0,0,0,746,117,1,0,0,0,747,745,1,0,0,0,
748,749,3,50,25,0,749,750,3,94,47,0,750,756,1,0,0,0,751,753,3,52,26,0,752,
754,3,124,62,0,753,752,1,0,0,0,753,754,1,0,0,0,754,756,1,0,0,0,755,748,1,
0,0,0,755,751,1,0,0,0,756,119,1,0,0,0,757,762,5,110,0,0,758,759,5,93,0,0,
759,761,5,110,0,0,760,758,1,0,0,0,761,764,1,0,0,0,762,760,1,0,0,0,762,763,
1,0,0,0,763,121,1,0,0,0,764,762,1,0,0,0,765,767,3,72,36,0,766,768,3,124,
62,0,767,766,1,0,0,0,767,768,1,0,0,0,768,123,1,0,0,0,769,781,3,110,55,0,
770,772,3,110,55,0,771,770,1,0,0,0,771,772,1,0,0,0,772,773,1,0,0,0,773,777,
3,126,63,0,774,776,3,100,50,0,775,774,1,0,0,0,776,779,1,0,0,0,777,775,1,
0,0,0,777,778,1,0,0,0,778,781,1,0,0,0,779,777,1,0,0,0,780,769,1,0,0,0,780,
771,1,0,0,0,781,125,1,0,0,0,782,783,6,63,-1,0,783,784,5,64,0,0,784,785,3,
124,62,0,785,789,5,65,0,0,786,788,3,100,50,0,787,786,1,0,0,0,788,791,1,0,
0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,829,1,0,0,0,791,789,1,0,0,0,792,
794,5,66,0,0,793,795,3,112,56,0,794,793,1,0,0,0,794,795,1,0,0,0,795,797,
1,0,0,0,796,798,3,40,20,0,797,796,1,0,0,0,797,798,1,0,0,0,798,799,1,0,0,
0,799,829,5,67,0,0,800,801,5,66,0,0,801,803,5,45,0,0,802,804,3,112,56,0,
803,802,1,0,0,0,803,804,1,0,0,0,804,805,1,0,0,0,805,806,3,40,20,0,806,807,
5,67,0,0,807,829,1,0,0,0,808,809,5,66,0,0,809,810,3,112,56,0,810,811,5,45,
0,0,811,812,3,40,20,0,812,813,5,67,0,0,813,829,1,0,0,0,814,815,5,66,0,0,
815,816,5,80,0,0,816,829,5,67,0,0,817,819,5,64,0,0,818,820,3,114,57,0,819,
818,1,0,0,0,819,820,1,0,0,0,820,821,1,0,0,0,821,825,5,65,0,0,822,824,3,100,
50,0,823,822,1,0,0,0,824,827,1,0,0,0,825,823,1,0,0,0,825,826,1,0,0,0,826,
829,1,0,0,0,827,825,1,0,0,0,828,782,1,0,0,0,828,792,1,0,0,0,828,800,1,0,
0,0,828,808,1,0,0,0,828,814,1,0,0,0,828,817,1,0,0,0,829,873,1,0,0,0,830,
831,10,5,0,0,831,833,5,66,0,0,832,834,3,112,56,0,833,832,1,0,0,0,833,834,
1,0,0,0,834,836,1,0,0,0,835,837,3,40,20,0,836,835,1,0,0,0,836,837,1,0,0,
0,837,838,1,0,0,0,838,872,5,67,0,0,839,840,10,4,0,0,840,841,5,66,0,0,841,
843,5,45,0,0,842,844,3,112,56,0,843,842,1,0,0,0,843,844,1,0,0,0,844,845,
1,0,0,0,845,846,3,40,20,0,846,847,5,67,0,0,847,872,1,0,0,0,848,849,10,3,
0,0,849,850,5,66,0,0,850,851,3,112,56,0,851,852,5,45,0,0,852,853,3,40,20,
0,853,854,5,67,0,0,854,872,1,0,0,0,855,856,10,2,0,0,856,857,5,66,0,0,857,
858,5,80,0,0,858,872,5,67,0,0,859,860,10,1,0,0,860,862,5,64,0,0,861,863,
3,114,57,0,862,861,1,0,0,0,862,863,1,0,0,0,863,864,1,0,0,0,864,868,5,65,
0,0,865,867,3,100,50,0,866,865,1,0,0,0,867,870,1,0,0,0,868,866,1,0,0,0,868,
869,1,0,0,0,869,872,1,0,0,0,870,868,1,0,0,0,871,830,1,0,0,0,871,839,1,0,
0,0,871,848,1,0,0,0,871,855,1,0,0,0,871,859,1,0,0,0,872,875,1,0,0,0,873,
871,1,0,0,0,873,874,1,0,0,0,874,127,1,0,0,0,875,873,1,0,0,0,876,877,5,110,
0,0,877,129,1,0,0,0,878,887,3,40,20,0,879,880,5,68,0,0,880,882,3,132,66,
0,881,883,5,93,0,0,882,881,1,0,0,0,882,883,1,0,0,0,883,884,1,0,0,0,884,885,
5,69,0,0,885,887,1,0,0,0,886,878,1,0,0,0,886,879,1,0,0,0,887,131,1,0,0,0,
888,890,3,134,67,0,889,888,1,0,0,0,889,890,1,0,0,0,890,891,1,0,0,0,891,899,
3,130,65,0,892,894,5,93,0,0,893,895,3,134,67,0,894,893,1,0,0,0,894,895,1,
0,0,0,895,896,1,0,0,0,896,898,3,130,65,0,897,892,1,0,0,0,898,901,1,0,0,0,
899,897,1,0,0,0,899,900,1,0,0,0,900,133,1,0,0,0,901,899,1,0,0,0,902,903,
3,136,68,0,903,904,5,94,0,0,904,135,1,0,0,0,905,907,3,138,69,0,906,905,1,
0,0,0,907,908,1,0,0,0,908,906,1,0,0,0,908,909,1,0,0,0,909,137,1,0,0,0,910,
911,5,66,0,0,911,912,3,46,23,0,912,913,5,67,0,0,913,917,1,0,0,0,914,915,
5,108,0,0,915,917,5,110,0,0,916,910,1,0,0,0,916,914,1,0,0,0,917,139,1,0,
0,0,918,919,5,62,0,0,919,920,5,64,0,0,920,921,3,46,23,0,921,923,5,93,0,0,
922,924,5,113,0,0,923,922,1,0,0,0,924,925,1,0,0,0,925,923,1,0,0,0,925,926,
1,0,0,0,926,927,1,0,0,0,927,928,5,65,0,0,928,929,5,92,0,0,929,141,1,0,0,
0,930,968,3,144,72,0,931,968,3,146,73,0,932,968,3,152,76,0,933,968,3,154,
77,0,934,968,3,156,78,0,935,968,3,164,82,0,936,937,7,18,0,0,937,938,7,19,
0,0,938,947,5,64,0,0,939,944,3,36,18,0,940,941,5,93,0,0,941,943,3,36,18,
0,942,940,1,0,0,0,943,946,1,0,0,0,944,942,1,0,0,0,944,945,1,0,0,0,945,948,
1,0,0,0,946,944,1,0,0,0,947,939,1,0,0,0,947,948,1,0,0,0,948,962,1,0,0,0,
949,958,5,91,0,0,950,955,3,36,18,0,951,952,5,93,0,0,952,954,3,36,18,0,953,
951,1,0,0,0,954,957,1,0,0,0,955,953,1,0,0,0,955,956,1,0,0,0,956,959,1,0,
0,0,957,955,1,0,0,0,958,950,1,0,0,0,958,959,1,0,0,0,959,961,1,0,0,0,960,
949,1,0,0,0,961,964,1,0,0,0,962,960,1,0,0,0,962,963,1,0,0,0,963,965,1,0,
0,0,964,962,1,0,0,0,965,966,5,65,0,0,966,968,5,92,0,0,967,930,1,0,0,0,967,
931,1,0,0,0,967,932,1,0,0,0,967,933,1,0,0,0,967,934,1,0,0,0,967,935,1,0,
0,0,967,936,1,0,0,0,968,143,1,0,0,0,969,970,5,110,0,0,970,972,5,91,0,0,971,
973,3,142,71,0,972,971,1,0,0,0,972,973,1,0,0,0,973,983,1,0,0,0,974,975,5,
22,0,0,975,976,3,46,23,0,976,977,5,91,0,0,977,978,3,142,71,0,978,983,1,0,
0,0,979,980,5,26,0,0,980,981,5,91,0,0,981,983,3,142,71,0,982,969,1,0,0,0,
982,974,1,0,0,0,982,979,1,0,0,0,983,145,1,0,0,0,984,986,5,68,0,0,985,987,
3,148,74,0,986,985,1,0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,988,989,5,69,
0,0,989,147,1,0,0,0,990,992,3,150,75,0,991,990,1,0,0,0,992,993,1,0,0,0,993,
991,1,0,0,0,993,994,1,0,0,0,994,149,1,0,0,0,995,998,3,142,71,0,996,998,3,
48,24,0,997,995,1,0,0,0,997,996,1,0,0,0,998,151,1,0,0,0,999,1001,3,44,22,
0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,1002,1,0,0,0,1002,1003,5,92,0,
0,1003,153,1,0,0,0,1004,1005,5,35,0,0,1005,1006,5,64,0,0,1006,1007,3,44,
22,0,1007,1008,5,65,0,0,1008,1011,3,142,71,0,1009,1010,5,29,0,0,1010,1012,
3,142,71,0,1011,1009,1,0,0,0,1011,1012,1,0,0,0,1012,1020,1,0,0,0,1013,1014,
5,47,0,0,1014,1015,5,64,0,0,1015,1016,3,44,22,0,1016,1017,5,65,0,0,1017,
1018,3,142,71,0,1018,1020,1,0,0,0,1019,1004,1,0,0,0,1019,1013,1,0,0,0,1020,
155,1,0,0,0,1021,1022,5,53,0,0,1022,1023,5,64,0,0,1023,1024,3,44,22,0,1024,
1025,5,65,0,0,1025,1026,3,142,71,0,1026,1042,1,0,0,0,1027,1028,5,27,0,0,
1028,1029,3,142,71,0,1029,1030,5,53,0,0,1030,1031,5,64,0,0,1031,1032,3,44,
22,0,1032,1033,5,65,0,0,1033,1034,5,92,0,0,1034,1042,1,0,0,0,1035,1036,5,
33,0,0,1036,1037,5,64,0,0,1037,1038,3,158,79,0,1038,1039,5,65,0,0,1039,1040,
3,142,71,0,1040,1042,1,0,0,0,1041,1021,1,0,0,0,1041,1027,1,0,0,0,1041,1035,
1,0,0,0,1042,157,1,0,0,0,1043,1048,3,160,80,0,1044,1046,3,44,22,0,1045,1044,
1,0,0,0,1045,1046,1,0,0,0,1046,1048,1,0,0,0,1047,1043,1,0,0,0,1047,1045,
1,0,0,0,1048,1049,1,0,0,0,1049,1051,5,92,0,0,1050,1052,3,162,81,0,1051,1050,
1,0,0,0,1051,1052,1,0,0,0,1052,1053,1,0,0,0,1053,1055,5,92,0,0,1054,1056,
3,162,81,0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,159,1,0,0,0,1057,1059,
3,50,25,0,1058,1060,3,56,28,0,1059,1058,1,0,0,0,1059,1060,1,0,0,0,1060,161,
1,0,0,0,1061,1066,3,40,20,0,1062,1063,5,93,0,0,1063,1065,3,40,20,0,1064,
1062,1,0,0,0,1065,1068,1,0,0,0,1066,1064,1,0,0,0,1066,1067,1,0,0,0,1067,
163,1,0,0,0,1068,1066,1,0,0,0,1069,1070,5,34,0,0,1070,1080,5,110,0,0,1071,
1080,5,25,0,0,1072,1080,5,21,0,0,1073,1075,5,41,0,0,1074,1076,3,44,22,0,
1075,1074,1,0,0,0,1075,1076,1,0,0,0,1076,1080,1,0,0,0,1077,1078,5,34,0,0,
1078,1080,3,12,6,0,1079,1069,1,0,0,0,1079,1071,1,0,0,0,1079,1072,1,0,0,0,
1079,1073,1,0,0,0,1079,1077,1,0,0,0,1080,1081,1,0,0,0,1081,1082,5,92,0,0,
1082,165,1,0,0,0,1083,1085,3,168,84,0,1084,1083,1,0,0,0,1084,1085,1,0,0,
0,1085,1086,1,0,0,0,1086,1087,5,0,0,1,1087,167,1,0,0,0,1088,1090,3,170,85,
0,1089,1088,1,0,0,0,1090,1091,1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,
0,1092,169,1,0,0,0,1093,1097,3,172,86,0,1094,1097,3,48,24,0,1095,1097,5,
92,0,0,1096,1093,1,0,0,0,1096,1094,1,0,0,0,1096,1095,1,0,0,0,1097,171,1,
0,0,0,1098,1100,3,50,25,0,1099,1098,1,0,0,0,1099,1100,1,0,0,0,1100,1101,
1,0,0,0,1101,1103,3,94,47,0,1102,1104,3,174,87,0,1103,1102,1,0,0,0,1103,
1104,1,0,0,0,1104,1105,1,0,0,0,1105,1106,3,146,73,0,1106,173,1,0,0,0,1107,
1109,3,48,24,0,1108,1107,1,0,0,0,1109,1110,1,0,0,0,1110,1108,1,0,0,0,1110,
1111,1,0,0,0,1111,175,1,0,0,0,135,181,189,209,223,228,235,243,247,255,262,
264,272,278,292,297,306,313,321,329,337,345,353,361,369,377,385,394,402,
411,418,423,428,433,440,447,453,484,488,497,504,514,518,521,528,533,537,
541,546,552,559,565,585,591,596,602,622,627,630,637,652,664,667,669,679,
683,693,697,701,707,710,717,719,724,728,733,738,745,753,755,762,767,771,
777,780,789,794,797,803,819,825,828,833,836,843,862,868,871,873,882,886,
889,894,899,908,916,925,944,947,955,958,962,967,972,982,986,993,997,1000,
1011,1019,1041,1045,1047,1051,1055,1059,1066,1075,1079,1084,1091,1096,1099,
1103,1110];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class CParser extends antlr4.Parser {

    static grammarFileName = "C.g4";
    static literalNames = [ null, "'__extension__'", "'__builtin_va_arg'", 
                            "'__builtin_offsetof'", "'__m128'", "'__m128d'", 
                            "'__m128i'", "'__typeof__'", "'__inline__'", 
                            "'__stdcall'", "'__declspec'", "'__cdecl'", 
                            "'__clrcall'", "'__fastcall'", "'__thiscall'", 
                            "'__vectorcall'", "'__asm'", "'__attribute__'", 
                            "'__asm__'", "'__volatile__'", "'auto'", "'break'", 
                            "'case'", "'char'", "'const'", "'continue'", 
                            "'default'", "'do'", "'double'", "'else'", "'enum'", 
                            "'extern'", "'float'", "'for'", "'goto'", "'if'", 
                            "'inline'", "'int'", "'long'", "'register'", 
                            "'restrict'", "'return'", "'short'", "'signed'", 
                            "'sizeof'", "'static'", "'struct'", "'switch'", 
                            "'typedef'", "'union'", "'unsigned'", "'void'", 
                            "'volatile'", "'while'", "'_Alignas'", "'_Alignof'", 
                            "'_Atomic'", "'_Bool'", "'_Complex'", "'_Generic'", 
                            "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
                            "'_Thread_local'", "'('", "')'", "'['", "']'", 
                            "'{'", "'}'", "'<'", "'<='", "'>'", "'>='", 
                            "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", 
                            "'*'", "'/'", "'%'", "'&'", "'|'", "'&&'", "'||'", 
                            "'^'", "'!'", "'~'", "'?'", "':'", "';'", "','", 
                            "'='", "'*='", "'/='", "'%='", "'+='", "'-='", 
                            "'<<='", "'>>='", "'&='", "'^='", "'|='", "'=='", 
                            "'!='", "'->'", "'.'", "'...'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, "Auto", "Break", "Case", 
                             "Char", "Const", "Continue", "Default", "Do", 
                             "Double", "Else", "Enum", "Extern", "Float", 
                             "For", "Goto", "If", "Inline", "Int", "Long", 
                             "Register", "Restrict", "Return", "Short", 
                             "Signed", "Sizeof", "Static", "Struct", "Switch", 
                             "Typedef", "Union", "Unsigned", "Void", "Volatile", 
                             "While", "Alignas", "Alignof", "Atomic", "Bool", 
                             "Complex", "Generic", "Imaginary", "Noreturn", 
                             "StaticAssert", "ThreadLocal", "LeftParen", 
                             "RightParen", "LeftBracket", "RightBracket", 
                             "LeftBrace", "RightBrace", "Less", "LessEqual", 
                             "Greater", "GreaterEqual", "LeftShift", "RightShift", 
                             "Plus", "PlusPlus", "Minus", "MinusMinus", 
                             "Star", "Div", "Mod", "And", "Or", "AndAnd", 
                             "OrOr", "Caret", "Not", "Tilde", "Question", 
                             "Colon", "Semi", "Comma", "Assign", "StarAssign", 
                             "DivAssign", "ModAssign", "PlusAssign", "MinusAssign", 
                             "LeftShiftAssign", "RightShiftAssign", "AndAssign", 
                             "XorAssign", "OrAssign", "Equal", "NotEqual", 
                             "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                             "DigitSequence", "StringLiteral", "MultiLineMacro", 
                             "Directive", "AsmBlock", "Whitespace", "Newline", 
                             "BlockComment", "LineComment" ];
    static ruleNames = [ "primaryExpression", "genericSelection", "genericAssocList", 
                         "genericAssociation", "postfixExpression", "argumentExpressionList", 
                         "unaryExpression", "unaryOperator", "castExpression", 
                         "multiplicativeExpression", "additiveExpression", 
                         "shiftExpression", "relationalExpression", "equalityExpression", 
                         "andExpression", "exclusiveOrExpression", "inclusiveOrExpression", 
                         "logicalAndExpression", "logicalOrExpression", 
                         "conditionalExpression", "assignmentExpression", 
                         "assignmentOperator", "expression", "constantExpression", 
                         "declaration", "declarationSpecifiers", "declarationSpecifiers2", 
                         "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                         "storageClassSpecifier", "typeSpecifier", "structOrUnionSpecifier", 
                         "structOrUnion", "structDeclarationList", "structDeclaration", 
                         "specifierQualifierList", "structDeclaratorList", 
                         "structDeclarator", "enumSpecifier", "enumeratorList", 
                         "enumerator", "enumerationConstant", "atomicTypeSpecifier", 
                         "typeQualifier", "functionSpecifier", "alignmentSpecifier", 
                         "declarator", "directDeclarator", "vcSpecificModifer", 
                         "gccDeclaratorExtension", "gccAttributeSpecifier", 
                         "gccAttributeList", "gccAttribute", "nestedParenthesesBlock", 
                         "pointer", "typeQualifierList", "parameterTypeList", 
                         "parameterList", "parameterDeclaration", "identifierList", 
                         "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                         "typedefName", "initializer", "initializerList", 
                         "designation", "designatorList", "designator", 
                         "staticAssertDeclaration", "statement", "labeledStatement", 
                         "compoundStatement", "blockItemList", "blockItem", 
                         "expressionStatement", "selectionStatement", "iterationStatement", 
                         "forCondition", "forDeclaration", "forExpression", 
                         "jumpStatement", "compilationUnit", "translationUnit", 
                         "externalDeclaration", "functionDefinition", "declarationList" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CParser.ruleNames;
        this.literalNames = CParser.literalNames;
        this.symbolicNames = CParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 48:
    	    		return this.directDeclarator_sempred(localctx, predIndex);
    	case 63:
    	    		return this.directAbstractDeclarator_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    directDeclarator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 9);
    		case 1:
    			return this.precpred(this._ctx, 8);
    		case 2:
    			return this.precpred(this._ctx, 7);
    		case 3:
    			return this.precpred(this._ctx, 6);
    		case 4:
    			return this.precpred(this._ctx, 5);
    		case 5:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    directAbstractDeclarator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 5);
    		case 7:
    			return this.precpred(this._ctx, 4);
    		case 8:
    			return this.precpred(this._ctx, 3);
    		case 9:
    			return this.precpred(this._ctx, 2);
    		case 10:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	primaryExpression() {
	    let localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CParser.RULE_primaryExpression);
	    var _la = 0;
	    try {
	        this.state = 209;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 176;
	            this.match(CParser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 177;
	            this.match(CParser.Constant);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 179; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 178;
	                this.match(CParser.StringLiteral);
	                this.state = 181; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===113);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 183;
	            this.match(CParser.LeftParen);
	            this.state = 184;
	            this.expression();
	            this.state = 185;
	            this.match(CParser.RightParen);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 187;
	            this.genericSelection();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 189;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1) {
	                this.state = 188;
	                this.match(CParser.T__0);
	            }

	            this.state = 191;
	            this.match(CParser.LeftParen);
	            this.state = 192;
	            this.compoundStatement();
	            this.state = 193;
	            this.match(CParser.RightParen);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 195;
	            this.match(CParser.T__1);
	            this.state = 196;
	            this.match(CParser.LeftParen);
	            this.state = 197;
	            this.unaryExpression();
	            this.state = 198;
	            this.match(CParser.Comma);
	            this.state = 199;
	            this.typeName();
	            this.state = 200;
	            this.match(CParser.RightParen);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 202;
	            this.match(CParser.T__2);
	            this.state = 203;
	            this.match(CParser.LeftParen);
	            this.state = 204;
	            this.typeName();
	            this.state = 205;
	            this.match(CParser.Comma);
	            this.state = 206;
	            this.unaryExpression();
	            this.state = 207;
	            this.match(CParser.RightParen);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericSelection() {
	    let localctx = new GenericSelectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CParser.RULE_genericSelection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 211;
	        this.match(CParser.Generic);
	        this.state = 212;
	        this.match(CParser.LeftParen);
	        this.state = 213;
	        this.assignmentExpression();
	        this.state = 214;
	        this.match(CParser.Comma);
	        this.state = 215;
	        this.genericAssocList();
	        this.state = 216;
	        this.match(CParser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericAssocList() {
	    let localctx = new GenericAssocListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CParser.RULE_genericAssocList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 218;
	        this.genericAssociation();
	        this.state = 223;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===93) {
	            this.state = 219;
	            this.match(CParser.Comma);
	            this.state = 220;
	            this.genericAssociation();
	            this.state = 225;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericAssociation() {
	    let localctx = new GenericAssociationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CParser.RULE_genericAssociation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 228;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 23:
	        case 24:
	        case 28:
	        case 30:
	        case 32:
	        case 37:
	        case 38:
	        case 40:
	        case 42:
	        case 43:
	        case 46:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 56:
	        case 57:
	        case 58:
	        case 110:
	            this.state = 226;
	            this.typeName();
	            break;
	        case 26:
	            this.state = 227;
	            this.match(CParser.Default);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 230;
	        this.match(CParser.Colon);
	        this.state = 231;
	        this.assignmentExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixExpression() {
	    let localctx = new PostfixExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CParser.RULE_postfixExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 247;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 233;
	            this.primaryExpression();
	            break;

	        case 2:
	            this.state = 235;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1) {
	                this.state = 234;
	                this.match(CParser.T__0);
	            }

	            this.state = 237;
	            this.match(CParser.LeftParen);
	            this.state = 238;
	            this.typeName();
	            this.state = 239;
	            this.match(CParser.RightParen);
	            this.state = 240;
	            this.match(CParser.LeftBrace);
	            this.state = 241;
	            this.initializerList();
	            this.state = 243;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===93) {
	                this.state = 242;
	                this.match(CParser.Comma);
	            }

	            this.state = 245;
	            this.match(CParser.RightBrace);
	            break;

	        }
	        this.state = 264;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 40965) !== 0) || _la===107 || _la===108) {
	            this.state = 262;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 66:
	                this.state = 249;
	                this.match(CParser.LeftBracket);
	                this.state = 250;
	                this.expression();
	                this.state = 251;
	                this.match(CParser.RightBracket);
	                break;
	            case 64:
	                this.state = 253;
	                this.match(CParser.LeftParen);
	                this.state = 255;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 14) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1083393) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 12959) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 15) !== 0)) {
	                    this.state = 254;
	                    this.argumentExpressionList();
	                }

	                this.state = 257;
	                this.match(CParser.RightParen);
	                break;
	            case 107:
	            case 108:
	                this.state = 258;
	                _la = this._input.LA(1);
	                if(!(_la===107 || _la===108)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 259;
	                this.match(CParser.Identifier);
	                break;
	            case 77:
	                this.state = 260;
	                this.match(CParser.PlusPlus);
	                break;
	            case 79:
	                this.state = 261;
	                this.match(CParser.MinusMinus);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 266;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentExpressionList() {
	    let localctx = new ArgumentExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, CParser.RULE_argumentExpressionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 267;
	        this.assignmentExpression();
	        this.state = 272;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===93) {
	            this.state = 268;
	            this.match(CParser.Comma);
	            this.state = 269;
	            this.assignmentExpression();
	            this.state = 274;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CParser.RULE_unaryExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 278;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 275;
	                _la = this._input.LA(1);
	                if(!(_la===44 || _la===77 || _la===79)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                } 
	            }
	            this.state = 280;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	        }

	        this.state = 292;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 3:
	        case 59:
	        case 64:
	        case 110:
	        case 111:
	        case 113:
	            this.state = 281;
	            this.postfixExpression();
	            break;
	        case 76:
	        case 78:
	        case 80:
	        case 83:
	        case 88:
	        case 89:
	            this.state = 282;
	            this.unaryOperator();
	            this.state = 283;
	            this.castExpression();
	            break;
	        case 44:
	        case 55:
	            this.state = 285;
	            _la = this._input.LA(1);
	            if(!(_la===44 || _la===55)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 286;
	            this.match(CParser.LeftParen);
	            this.state = 287;
	            this.typeName();
	            this.state = 288;
	            this.match(CParser.RightParen);
	            break;
	        case 85:
	            this.state = 290;
	            this.match(CParser.AndAnd);
	            this.state = 291;
	            this.match(CParser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryOperator() {
	    let localctx = new UnaryOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CParser.RULE_unaryOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 294;
	        _la = this._input.LA(1);
	        if(!(((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 12437) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castExpression() {
	    let localctx = new CastExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CParser.RULE_castExpression);
	    var _la = 0;
	    try {
	        this.state = 306;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 297;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1) {
	                this.state = 296;
	                this.match(CParser.T__0);
	            }

	            this.state = 299;
	            this.match(CParser.LeftParen);
	            this.state = 300;
	            this.typeName();
	            this.state = 301;
	            this.match(CParser.RightParen);
	            this.state = 302;
	            this.castExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 304;
	            this.unaryExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 305;
	            this.match(CParser.DigitSequence);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpression() {
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CParser.RULE_multiplicativeExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 308;
	        this.castExpression();
	        this.state = 313;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 7) !== 0)) {
	            this.state = 309;
	            _la = this._input.LA(1);
	            if(!(((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 7) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 310;
	            this.castExpression();
	            this.state = 315;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpression() {
	    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CParser.RULE_additiveExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 316;
	        this.multiplicativeExpression();
	        this.state = 321;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===76 || _la===78) {
	            this.state = 317;
	            _la = this._input.LA(1);
	            if(!(_la===76 || _la===78)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 318;
	            this.multiplicativeExpression();
	            this.state = 323;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shiftExpression() {
	    let localctx = new ShiftExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CParser.RULE_shiftExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 324;
	        this.additiveExpression();
	        this.state = 329;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===74 || _la===75) {
	            this.state = 325;
	            _la = this._input.LA(1);
	            if(!(_la===74 || _la===75)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 326;
	            this.additiveExpression();
	            this.state = 331;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CParser.RULE_relationalExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 332;
	        this.shiftExpression();
	        this.state = 337;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 15) !== 0)) {
	            this.state = 333;
	            _la = this._input.LA(1);
	            if(!(((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 15) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 334;
	            this.shiftExpression();
	            this.state = 339;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equalityExpression() {
	    let localctx = new EqualityExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CParser.RULE_equalityExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 340;
	        this.relationalExpression();
	        this.state = 345;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===105 || _la===106) {
	            this.state = 341;
	            _la = this._input.LA(1);
	            if(!(_la===105 || _la===106)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 342;
	            this.relationalExpression();
	            this.state = 347;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	andExpression() {
	    let localctx = new AndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CParser.RULE_andExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 348;
	        this.equalityExpression();
	        this.state = 353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 349;
	            this.match(CParser.And);
	            this.state = 350;
	            this.equalityExpression();
	            this.state = 355;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exclusiveOrExpression() {
	    let localctx = new ExclusiveOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, CParser.RULE_exclusiveOrExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 356;
	        this.andExpression();
	        this.state = 361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===87) {
	            this.state = 357;
	            this.match(CParser.Caret);
	            this.state = 358;
	            this.andExpression();
	            this.state = 363;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inclusiveOrExpression() {
	    let localctx = new InclusiveOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CParser.RULE_inclusiveOrExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 364;
	        this.exclusiveOrExpression();
	        this.state = 369;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===84) {
	            this.state = 365;
	            this.match(CParser.Or);
	            this.state = 366;
	            this.exclusiveOrExpression();
	            this.state = 371;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalAndExpression() {
	    let localctx = new LogicalAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CParser.RULE_logicalAndExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 372;
	        this.inclusiveOrExpression();
	        this.state = 377;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===85) {
	            this.state = 373;
	            this.match(CParser.AndAnd);
	            this.state = 374;
	            this.inclusiveOrExpression();
	            this.state = 379;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalOrExpression() {
	    let localctx = new LogicalOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CParser.RULE_logicalOrExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 380;
	        this.logicalAndExpression();
	        this.state = 385;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 381;
	            this.match(CParser.OrOr);
	            this.state = 382;
	            this.logicalAndExpression();
	            this.state = 387;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalExpression() {
	    let localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CParser.RULE_conditionalExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 388;
	        this.logicalOrExpression();
	        this.state = 394;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 389;
	            this.match(CParser.Question);
	            this.state = 390;
	            this.expression();
	            this.state = 391;
	            this.match(CParser.Colon);
	            this.state = 392;
	            this.conditionalExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentExpression() {
	    let localctx = new AssignmentExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CParser.RULE_assignmentExpression);
	    try {
	        this.state = 402;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 396;
	            this.conditionalExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 397;
	            this.unaryExpression();
	            this.state = 398;
	            this.assignmentOperator();
	            this.state = 399;
	            this.assignmentExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 401;
	            this.match(CParser.DigitSequence);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CParser.RULE_assignmentOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 404;
	        _la = this._input.LA(1);
	        if(!(((((_la - 94)) & ~0x1f) === 0 && ((1 << (_la - 94)) & 2047) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CParser.RULE_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 406;
	        this.assignmentExpression();
	        this.state = 411;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===93) {
	            this.state = 407;
	            this.match(CParser.Comma);
	            this.state = 408;
	            this.assignmentExpression();
	            this.state = 413;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantExpression() {
	    let localctx = new ConstantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CParser.RULE_constantExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 414;
	        this.conditionalExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CParser.RULE_declaration);
	    var _la = 0;
	    try {
	        this.state = 423;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 17:
	        case 20:
	        case 23:
	        case 24:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 42:
	        case 43:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 54:
	        case 56:
	        case 57:
	        case 58:
	        case 61:
	        case 63:
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 416;
	            this.declarationSpecifiers();
	            this.state = 418;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 64000) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 8454145) !== 0) || _la===110) {
	                this.state = 417;
	                this.initDeclaratorList();
	            }

	            this.state = 420;
	            this.match(CParser.Semi);
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 422;
	            this.staticAssertDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationSpecifiers() {
	    let localctx = new DeclarationSpecifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, CParser.RULE_declarationSpecifiers);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 426; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 425;
	        		this.declarationSpecifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 428; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,31, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationSpecifiers2() {
	    let localctx = new DeclarationSpecifiers2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CParser.RULE_declarationSpecifiers2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 431; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 430;
	            this.declarationSpecifier();
	            this.state = 433; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3516008434) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 2808049137) !== 0) || _la===110);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationSpecifier() {
	    let localctx = new DeclarationSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CParser.RULE_declarationSpecifier);
	    try {
	        this.state = 440;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 435;
	            this.storageClassSpecifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 436;
	            this.typeSpecifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 437;
	            this.typeQualifier();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 438;
	            this.functionSpecifier();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 439;
	            this.alignmentSpecifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initDeclaratorList() {
	    let localctx = new InitDeclaratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CParser.RULE_initDeclaratorList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 442;
	        this.initDeclarator();
	        this.state = 447;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===93) {
	            this.state = 443;
	            this.match(CParser.Comma);
	            this.state = 444;
	            this.initDeclarator();
	            this.state = 449;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initDeclarator() {
	    let localctx = new InitDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CParser.RULE_initDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 450;
	        this.declarator();
	        this.state = 453;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===94) {
	            this.state = 451;
	            this.match(CParser.Assign);
	            this.state = 452;
	            this.initializer();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storageClassSpecifier() {
	    let localctx = new StorageClassSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CParser.RULE_storageClassSpecifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 455;
	        _la = this._input.LA(1);
	        if(!(_la===20 || _la===31 || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 16777793) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpecifier() {
	    let localctx = new TypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CParser.RULE_typeSpecifier);
	    var _la = 0;
	    try {
	        this.state = 484;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 51:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 457;
	            this.match(CParser.Void);
	            break;
	        case 23:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 458;
	            this.match(CParser.Char);
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 459;
	            this.match(CParser.Short);
	            break;
	        case 37:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 460;
	            this.match(CParser.Int);
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 461;
	            this.match(CParser.Long);
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 462;
	            this.match(CParser.Float);
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 463;
	            this.match(CParser.Double);
	            break;
	        case 43:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 464;
	            this.match(CParser.Signed);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 465;
	            this.match(CParser.Unsigned);
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 466;
	            this.match(CParser.Bool);
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 467;
	            this.match(CParser.Complex);
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 468;
	            this.match(CParser.T__3);
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 469;
	            this.match(CParser.T__4);
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 470;
	            this.match(CParser.T__5);
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 471;
	            this.match(CParser.T__0);
	            this.state = 472;
	            this.match(CParser.LeftParen);
	            this.state = 473;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 112) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 474;
	            this.match(CParser.RightParen);
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 475;
	            this.atomicTypeSpecifier();
	            break;
	        case 46:
	        case 49:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 476;
	            this.structOrUnionSpecifier();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 477;
	            this.enumSpecifier();
	            break;
	        case 110:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 478;
	            this.typedefName();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 479;
	            this.match(CParser.T__6);
	            this.state = 480;
	            this.match(CParser.LeftParen);
	            this.state = 481;
	            this.constantExpression();
	            this.state = 482;
	            this.match(CParser.RightParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structOrUnionSpecifier() {
	    let localctx = new StructOrUnionSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CParser.RULE_structOrUnionSpecifier);
	    var _la = 0;
	    try {
	        this.state = 497;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 486;
	            this.structOrUnion();
	            this.state = 488;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===110) {
	                this.state = 487;
	                this.match(CParser.Identifier);
	            }

	            this.state = 490;
	            this.match(CParser.LeftBrace);
	            this.state = 491;
	            this.structDeclarationList();
	            this.state = 492;
	            this.match(CParser.RightBrace);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 494;
	            this.structOrUnion();
	            this.state = 495;
	            this.match(CParser.Identifier);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structOrUnion() {
	    let localctx = new StructOrUnionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CParser.RULE_structOrUnion);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 499;
	        _la = this._input.LA(1);
	        if(!(_la===46 || _la===49)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structDeclarationList() {
	    let localctx = new StructDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CParser.RULE_structDeclarationList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 502; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 501;
	            this.structDeclaration();
	            this.state = 504; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 1367343346) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 1193168225) !== 0) || _la===110);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structDeclaration() {
	    let localctx = new StructDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CParser.RULE_structDeclaration);
	    try {
	        this.state = 514;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 506;
	            this.specifierQualifierList();
	            this.state = 507;
	            this.structDeclaratorList();
	            this.state = 508;
	            this.match(CParser.Semi);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 510;
	            this.specifierQualifierList();
	            this.state = 511;
	            this.match(CParser.Semi);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 513;
	            this.staticAssertDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specifierQualifierList() {
	    let localctx = new SpecifierQualifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CParser.RULE_specifierQualifierList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 518;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 516;
	            this.typeSpecifier();
	            break;

	        case 2:
	            this.state = 517;
	            this.typeQualifier();
	            break;

	        }
	        this.state = 521;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        if(la_===1) {
	            this.state = 520;
	            this.specifierQualifierList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structDeclaratorList() {
	    let localctx = new StructDeclaratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CParser.RULE_structDeclaratorList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 523;
	        this.structDeclarator();
	        this.state = 528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===93) {
	            this.state = 524;
	            this.match(CParser.Comma);
	            this.state = 525;
	            this.structDeclarator();
	            this.state = 530;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structDeclarator() {
	    let localctx = new StructDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CParser.RULE_structDeclarator);
	    var _la = 0;
	    try {
	        this.state = 537;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 531;
	            this.declarator();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 533;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 64000) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 8454145) !== 0) || _la===110) {
	                this.state = 532;
	                this.declarator();
	            }

	            this.state = 535;
	            this.match(CParser.Colon);
	            this.state = 536;
	            this.constantExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumSpecifier() {
	    let localctx = new EnumSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CParser.RULE_enumSpecifier);
	    var _la = 0;
	    try {
	        this.state = 552;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 539;
	            this.match(CParser.Enum);
	            this.state = 541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===110) {
	                this.state = 540;
	                this.match(CParser.Identifier);
	            }

	            this.state = 543;
	            this.match(CParser.LeftBrace);
	            this.state = 544;
	            this.enumeratorList();
	            this.state = 546;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===93) {
	                this.state = 545;
	                this.match(CParser.Comma);
	            }

	            this.state = 548;
	            this.match(CParser.RightBrace);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 550;
	            this.match(CParser.Enum);
	            this.state = 551;
	            this.match(CParser.Identifier);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumeratorList() {
	    let localctx = new EnumeratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CParser.RULE_enumeratorList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 554;
	        this.enumerator();
	        this.state = 559;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 555;
	                this.match(CParser.Comma);
	                this.state = 556;
	                this.enumerator(); 
	            }
	            this.state = 561;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerator() {
	    let localctx = new EnumeratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CParser.RULE_enumerator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 562;
	        this.enumerationConstant();
	        this.state = 565;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===94) {
	            this.state = 563;
	            this.match(CParser.Assign);
	            this.state = 564;
	            this.constantExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerationConstant() {
	    let localctx = new EnumerationConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CParser.RULE_enumerationConstant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 567;
	        this.match(CParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomicTypeSpecifier() {
	    let localctx = new AtomicTypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CParser.RULE_atomicTypeSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 569;
	        this.match(CParser.Atomic);
	        this.state = 570;
	        this.match(CParser.LeftParen);
	        this.state = 571;
	        this.typeName();
	        this.state = 572;
	        this.match(CParser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeQualifier() {
	    let localctx = new TypeQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CParser.RULE_typeQualifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 574;
	        _la = this._input.LA(1);
	        if(!(_la===24 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 69633) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionSpecifier() {
	    let localctx = new FunctionSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CParser.RULE_functionSpecifier);
	    try {
	        this.state = 585;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 36:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 576;
	            this.match(CParser.Inline);
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 577;
	            this.match(CParser.Noreturn);
	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 578;
	            this.match(CParser.T__7);
	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 579;
	            this.match(CParser.T__8);
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 580;
	            this.gccAttributeSpecifier();
	            break;
	        case 10:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 581;
	            this.match(CParser.T__9);
	            this.state = 582;
	            this.match(CParser.LeftParen);
	            this.state = 583;
	            this.match(CParser.Identifier);
	            this.state = 584;
	            this.match(CParser.RightParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alignmentSpecifier() {
	    let localctx = new AlignmentSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CParser.RULE_alignmentSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 587;
	        this.match(CParser.Alignas);
	        this.state = 588;
	        this.match(CParser.LeftParen);
	        this.state = 591;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 589;
	            this.typeName();
	            break;

	        case 2:
	            this.state = 590;
	            this.constantExpression();
	            break;

	        }
	        this.state = 593;
	        this.match(CParser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarator() {
	    let localctx = new DeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CParser.RULE_declarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===80 || _la===87) {
	            this.state = 595;
	            this.pointer();
	        }

	        this.state = 598;
	        this.directDeclarator(0);
	        this.state = 602;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 599;
	                this.gccDeclaratorExtension(); 
	            }
	            this.state = 604;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	directDeclarator(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DirectDeclaratorContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 96;
	    this.enterRecursionRule(localctx, 96, CParser.RULE_directDeclarator, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 622;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 606;
	            this.match(CParser.Identifier);
	            break;

	        case 2:
	            this.state = 607;
	            this.match(CParser.LeftParen);
	            this.state = 608;
	            this.declarator();
	            this.state = 609;
	            this.match(CParser.RightParen);
	            break;

	        case 3:
	            this.state = 611;
	            this.match(CParser.Identifier);
	            this.state = 612;
	            this.match(CParser.Colon);
	            this.state = 613;
	            this.match(CParser.DigitSequence);
	            break;

	        case 4:
	            this.state = 614;
	            this.vcSpecificModifer();
	            this.state = 615;
	            this.match(CParser.Identifier);
	            break;

	        case 5:
	            this.state = 617;
	            this.match(CParser.LeftParen);
	            this.state = 618;
	            this.vcSpecificModifer();
	            this.state = 619;
	            this.declarator();
	            this.state = 620;
	            this.match(CParser.RightParen);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 669;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 667;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
	                    this.state = 624;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 625;
	                    this.match(CParser.LeftBracket);
	                    this.state = 627;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===24 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 69633) !== 0)) {
	                        this.state = 626;
	                        this.typeQualifierList();
	                    }

	                    this.state = 630;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 14) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1083393) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 12959) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 15) !== 0)) {
	                        this.state = 629;
	                        this.assignmentExpression();
	                    }

	                    this.state = 632;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 2:
	                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
	                    this.state = 633;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 634;
	                    this.match(CParser.LeftBracket);
	                    this.state = 635;
	                    this.match(CParser.Static);
	                    this.state = 637;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===24 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 69633) !== 0)) {
	                        this.state = 636;
	                        this.typeQualifierList();
	                    }

	                    this.state = 639;
	                    this.assignmentExpression();
	                    this.state = 640;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 3:
	                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
	                    this.state = 642;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 643;
	                    this.match(CParser.LeftBracket);
	                    this.state = 644;
	                    this.typeQualifierList();
	                    this.state = 645;
	                    this.match(CParser.Static);
	                    this.state = 646;
	                    this.assignmentExpression();
	                    this.state = 647;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 4:
	                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
	                    this.state = 649;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 650;
	                    this.match(CParser.LeftBracket);
	                    this.state = 652;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===24 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 69633) !== 0)) {
	                        this.state = 651;
	                        this.typeQualifierList();
	                    }

	                    this.state = 654;
	                    this.match(CParser.Star);
	                    this.state = 655;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 5:
	                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
	                    this.state = 656;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 657;
	                    this.match(CParser.LeftParen);
	                    this.state = 658;
	                    this.parameterTypeList();
	                    this.state = 659;
	                    this.match(CParser.RightParen);
	                    break;

	                case 6:
	                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
	                    this.state = 661;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 662;
	                    this.match(CParser.LeftParen);
	                    this.state = 664;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===110) {
	                        this.state = 663;
	                        this.identifierList();
	                    }

	                    this.state = 666;
	                    this.match(CParser.RightParen);
	                    break;

	                } 
	            }
	            this.state = 671;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	vcSpecificModifer() {
	    let localctx = new VcSpecificModiferContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CParser.RULE_vcSpecificModifer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 672;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 64000) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gccDeclaratorExtension() {
	    let localctx = new GccDeclaratorExtensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CParser.RULE_gccDeclaratorExtension);
	    var _la = 0;
	    try {
	        this.state = 683;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 16:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 674;
	            this.match(CParser.T__15);
	            this.state = 675;
	            this.match(CParser.LeftParen);
	            this.state = 677; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 676;
	                this.match(CParser.StringLiteral);
	                this.state = 679; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===113);
	            this.state = 681;
	            this.match(CParser.RightParen);
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 682;
	            this.gccAttributeSpecifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gccAttributeSpecifier() {
	    let localctx = new GccAttributeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CParser.RULE_gccAttributeSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 685;
	        this.match(CParser.T__16);
	        this.state = 686;
	        this.match(CParser.LeftParen);
	        this.state = 687;
	        this.match(CParser.LeftParen);
	        this.state = 688;
	        this.gccAttributeList();
	        this.state = 689;
	        this.match(CParser.RightParen);
	        this.state = 690;
	        this.match(CParser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gccAttributeList() {
	    let localctx = new GccAttributeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CParser.RULE_gccAttributeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 693;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 4160749567) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 8388607) !== 0)) {
	            this.state = 692;
	            this.gccAttribute();
	        }

	        this.state = 701;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===93) {
	            this.state = 695;
	            this.match(CParser.Comma);
	            this.state = 697;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 4160749567) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 8388607) !== 0)) {
	                this.state = 696;
	                this.gccAttribute();
	            }

	            this.state = 703;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gccAttribute() {
	    let localctx = new GccAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CParser.RULE_gccAttribute);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 704;
	        _la = this._input.LA(1);
	        if(_la<=0 || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 536870915) !== 0)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===64) {
	            this.state = 705;
	            this.match(CParser.LeftParen);
	            this.state = 707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 14) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1083393) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 12959) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 15) !== 0)) {
	                this.state = 706;
	                this.argumentExpressionList();
	            }

	            this.state = 709;
	            this.match(CParser.RightParen);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedParenthesesBlock() {
	    let localctx = new NestedParenthesesBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CParser.RULE_nestedParenthesesBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 719;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4294967293) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 33554431) !== 0)) {
	            this.state = 717;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 2:
	            case 3:
	            case 4:
	            case 5:
	            case 6:
	            case 7:
	            case 8:
	            case 9:
	            case 10:
	            case 11:
	            case 12:
	            case 13:
	            case 14:
	            case 15:
	            case 16:
	            case 17:
	            case 18:
	            case 19:
	            case 20:
	            case 21:
	            case 22:
	            case 23:
	            case 24:
	            case 25:
	            case 26:
	            case 27:
	            case 28:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	                this.state = 712;
	                _la = this._input.LA(1);
	                if(_la<=0 || _la===64 || _la===65) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;
	            case 64:
	                this.state = 713;
	                this.match(CParser.LeftParen);
	                this.state = 714;
	                this.nestedParenthesesBlock();
	                this.state = 715;
	                this.match(CParser.RightParen);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointer() {
	    let localctx = new PointerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CParser.RULE_pointer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 726; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 722;
	            _la = this._input.LA(1);
	            if(!(_la===80 || _la===87)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 724;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 69633) !== 0)) {
	                this.state = 723;
	                this.typeQualifierList();
	            }

	            this.state = 728; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===80 || _la===87);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeQualifierList() {
	    let localctx = new TypeQualifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CParser.RULE_typeQualifierList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 731; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 730;
	            this.typeQualifier();
	            this.state = 733; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===24 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 69633) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterTypeList() {
	    let localctx = new ParameterTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CParser.RULE_parameterTypeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 735;
	        this.parameterList();
	        this.state = 738;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===93) {
	            this.state = 736;
	            this.match(CParser.Comma);
	            this.state = 737;
	            this.match(CParser.Ellipsis);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterList() {
	    let localctx = new ParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CParser.RULE_parameterList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 740;
	        this.parameterDeclaration();
	        this.state = 745;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 741;
	                this.match(CParser.Comma);
	                this.state = 742;
	                this.parameterDeclaration(); 
	            }
	            this.state = 747;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDeclaration() {
	    let localctx = new ParameterDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CParser.RULE_parameterDeclaration);
	    var _la = 0;
	    try {
	        this.state = 755;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 748;
	            this.declarationSpecifiers();
	            this.state = 749;
	            this.declarator();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 751;
	            this.declarationSpecifiers2();
	            this.state = 753;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 8454149) !== 0)) {
	                this.state = 752;
	                this.abstractDeclarator();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierList() {
	    let localctx = new IdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CParser.RULE_identifierList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 757;
	        this.match(CParser.Identifier);
	        this.state = 762;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===93) {
	            this.state = 758;
	            this.match(CParser.Comma);
	            this.state = 759;
	            this.match(CParser.Identifier);
	            this.state = 764;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeName() {
	    let localctx = new TypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CParser.RULE_typeName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 765;
	        this.specifierQualifierList();
	        this.state = 767;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 8454149) !== 0)) {
	            this.state = 766;
	            this.abstractDeclarator();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abstractDeclarator() {
	    let localctx = new AbstractDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, CParser.RULE_abstractDeclarator);
	    var _la = 0;
	    try {
	        this.state = 780;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 769;
	            this.pointer();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 771;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80 || _la===87) {
	                this.state = 770;
	                this.pointer();
	            }

	            this.state = 773;
	            this.directAbstractDeclarator(0);
	            this.state = 777;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===16 || _la===17) {
	                this.state = 774;
	                this.gccDeclaratorExtension();
	                this.state = 779;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	directAbstractDeclarator(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DirectAbstractDeclaratorContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 126;
	    this.enterRecursionRule(localctx, 126, CParser.RULE_directAbstractDeclarator, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 828;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 783;
	            this.match(CParser.LeftParen);
	            this.state = 784;
	            this.abstractDeclarator();
	            this.state = 785;
	            this.match(CParser.RightParen);
	            this.state = 789;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 786;
	                    this.gccDeclaratorExtension(); 
	                }
	                this.state = 791;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
	            }

	            break;

	        case 2:
	            this.state = 792;
	            this.match(CParser.LeftBracket);
	            this.state = 794;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 69633) !== 0)) {
	                this.state = 793;
	                this.typeQualifierList();
	            }

	            this.state = 797;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 14) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1083393) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 12959) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 15) !== 0)) {
	                this.state = 796;
	                this.assignmentExpression();
	            }

	            this.state = 799;
	            this.match(CParser.RightBracket);
	            break;

	        case 3:
	            this.state = 800;
	            this.match(CParser.LeftBracket);
	            this.state = 801;
	            this.match(CParser.Static);
	            this.state = 803;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 69633) !== 0)) {
	                this.state = 802;
	                this.typeQualifierList();
	            }

	            this.state = 805;
	            this.assignmentExpression();
	            this.state = 806;
	            this.match(CParser.RightBracket);
	            break;

	        case 4:
	            this.state = 808;
	            this.match(CParser.LeftBracket);
	            this.state = 809;
	            this.typeQualifierList();
	            this.state = 810;
	            this.match(CParser.Static);
	            this.state = 811;
	            this.assignmentExpression();
	            this.state = 812;
	            this.match(CParser.RightBracket);
	            break;

	        case 5:
	            this.state = 814;
	            this.match(CParser.LeftBracket);
	            this.state = 815;
	            this.match(CParser.Star);
	            this.state = 816;
	            this.match(CParser.RightBracket);
	            break;

	        case 6:
	            this.state = 817;
	            this.match(CParser.LeftParen);
	            this.state = 819;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3516008434) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 2808049137) !== 0) || _la===110) {
	                this.state = 818;
	                this.parameterTypeList();
	            }

	            this.state = 821;
	            this.match(CParser.RightParen);
	            this.state = 825;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 822;
	                    this.gccDeclaratorExtension(); 
	                }
	                this.state = 827;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
	            }

	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 873;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,97,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 871;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
	                    this.state = 830;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 831;
	                    this.match(CParser.LeftBracket);
	                    this.state = 833;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===24 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 69633) !== 0)) {
	                        this.state = 832;
	                        this.typeQualifierList();
	                    }

	                    this.state = 836;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 14) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1083393) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 12959) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 15) !== 0)) {
	                        this.state = 835;
	                        this.assignmentExpression();
	                    }

	                    this.state = 838;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 2:
	                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
	                    this.state = 839;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 840;
	                    this.match(CParser.LeftBracket);
	                    this.state = 841;
	                    this.match(CParser.Static);
	                    this.state = 843;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===24 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 69633) !== 0)) {
	                        this.state = 842;
	                        this.typeQualifierList();
	                    }

	                    this.state = 845;
	                    this.assignmentExpression();
	                    this.state = 846;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 3:
	                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
	                    this.state = 848;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 849;
	                    this.match(CParser.LeftBracket);
	                    this.state = 850;
	                    this.typeQualifierList();
	                    this.state = 851;
	                    this.match(CParser.Static);
	                    this.state = 852;
	                    this.assignmentExpression();
	                    this.state = 853;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 4:
	                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
	                    this.state = 855;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 856;
	                    this.match(CParser.LeftBracket);
	                    this.state = 857;
	                    this.match(CParser.Star);
	                    this.state = 858;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 5:
	                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
	                    this.state = 859;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 860;
	                    this.match(CParser.LeftParen);
	                    this.state = 862;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3516008434) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 2808049137) !== 0) || _la===110) {
	                        this.state = 861;
	                        this.parameterTypeList();
	                    }

	                    this.state = 864;
	                    this.match(CParser.RightParen);
	                    this.state = 868;
	                    this._errHandler.sync(this);
	                    var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
	                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                        if(_alt===1) {
	                            this.state = 865;
	                            this.gccDeclaratorExtension(); 
	                        }
	                        this.state = 870;
	                        this._errHandler.sync(this);
	                        _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
	                    }

	                    break;

	                } 
	            }
	            this.state = 875;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,97,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	typedefName() {
	    let localctx = new TypedefNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CParser.RULE_typedefName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 876;
	        this.match(CParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializer() {
	    let localctx = new InitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CParser.RULE_initializer);
	    var _la = 0;
	    try {
	        this.state = 886;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 3:
	        case 44:
	        case 55:
	        case 59:
	        case 64:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 83:
	        case 85:
	        case 88:
	        case 89:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 878;
	            this.assignmentExpression();
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 879;
	            this.match(CParser.LeftBrace);
	            this.state = 880;
	            this.initializerList();
	            this.state = 882;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===93) {
	                this.state = 881;
	                this.match(CParser.Comma);
	            }

	            this.state = 884;
	            this.match(CParser.RightBrace);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializerList() {
	    let localctx = new InitializerListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CParser.RULE_initializerList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 889;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66 || _la===108) {
	            this.state = 888;
	            this.designation();
	        }

	        this.state = 891;
	        this.initializer();
	        this.state = 899;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 892;
	                this.match(CParser.Comma);
	                this.state = 894;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===66 || _la===108) {
	                    this.state = 893;
	                    this.designation();
	                }

	                this.state = 896;
	                this.initializer(); 
	            }
	            this.state = 901;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	designation() {
	    let localctx = new DesignationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CParser.RULE_designation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 902;
	        this.designatorList();
	        this.state = 903;
	        this.match(CParser.Assign);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	designatorList() {
	    let localctx = new DesignatorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CParser.RULE_designatorList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 906; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 905;
	            this.designator();
	            this.state = 908; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===66 || _la===108);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	designator() {
	    let localctx = new DesignatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CParser.RULE_designator);
	    try {
	        this.state = 916;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 66:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 910;
	            this.match(CParser.LeftBracket);
	            this.state = 911;
	            this.constantExpression();
	            this.state = 912;
	            this.match(CParser.RightBracket);
	            break;
	        case 108:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 914;
	            this.match(CParser.Dot);
	            this.state = 915;
	            this.match(CParser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticAssertDeclaration() {
	    let localctx = new StaticAssertDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CParser.RULE_staticAssertDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 918;
	        this.match(CParser.StaticAssert);
	        this.state = 919;
	        this.match(CParser.LeftParen);
	        this.state = 920;
	        this.constantExpression();
	        this.state = 921;
	        this.match(CParser.Comma);
	        this.state = 923; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 922;
	            this.match(CParser.StringLiteral);
	            this.state = 925; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===113);
	        this.state = 927;
	        this.match(CParser.RightParen);
	        this.state = 928;
	        this.match(CParser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CParser.RULE_statement);
	    var _la = 0;
	    try {
	        this.state = 967;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 930;
	            this.labeledStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 931;
	            this.compoundStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 932;
	            this.expressionStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 933;
	            this.selectionStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 934;
	            this.iterationStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 935;
	            this.jumpStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 936;
	            _la = this._input.LA(1);
	            if(!(_la===16 || _la===18)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 937;
	            _la = this._input.LA(1);
	            if(!(_la===19 || _la===52)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 938;
	            this.match(CParser.LeftParen);
	            this.state = 947;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 14) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1083393) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 12959) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 15) !== 0)) {
	                this.state = 939;
	                this.logicalOrExpression();
	                this.state = 944;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===93) {
	                    this.state = 940;
	                    this.match(CParser.Comma);
	                    this.state = 941;
	                    this.logicalOrExpression();
	                    this.state = 946;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 962;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===91) {
	                this.state = 949;
	                this.match(CParser.Colon);
	                this.state = 958;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 14) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1083393) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 12959) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 15) !== 0)) {
	                    this.state = 950;
	                    this.logicalOrExpression();
	                    this.state = 955;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===93) {
	                        this.state = 951;
	                        this.match(CParser.Comma);
	                        this.state = 952;
	                        this.logicalOrExpression();
	                        this.state = 957;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                }

	                this.state = 964;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 965;
	            this.match(CParser.RightParen);
	            this.state = 966;
	            this.match(CParser.Semi);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStatement() {
	    let localctx = new LabeledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CParser.RULE_labeledStatement);
	    try {
	        this.state = 982;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 969;
	            this.match(CParser.Identifier);
	            this.state = 970;
	            this.match(CParser.Colon);
	            this.state = 972;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	            if(la_===1) {
	                this.state = 971;
	                this.statement();

	            }
	            break;
	        case 22:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 974;
	            this.match(CParser.Case);
	            this.state = 975;
	            this.constantExpression();
	            this.state = 976;
	            this.match(CParser.Colon);
	            this.state = 977;
	            this.statement();
	            break;
	        case 26:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 979;
	            this.match(CParser.Default);
	            this.state = 980;
	            this.match(CParser.Colon);
	            this.state = 981;
	            this.statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundStatement() {
	    let localctx = new CompoundStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CParser.RULE_compoundStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 984;
	        this.match(CParser.LeftBrace);
	        this.state = 986;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3757508606) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4026531839) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 321515537) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 15) !== 0)) {
	            this.state = 985;
	            this.blockItemList();
	        }

	        this.state = 988;
	        this.match(CParser.RightBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockItemList() {
	    let localctx = new BlockItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CParser.RULE_blockItemList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 991; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 990;
	            this.blockItem();
	            this.state = 993; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3757508606) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4026531839) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 321515537) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 15) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockItem() {
	    let localctx = new BlockItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CParser.RULE_blockItem);
	    try {
	        this.state = 997;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 995;
	            this.statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 996;
	            this.declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CParser.RULE_expressionStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1000;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 14) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1083393) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 12959) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 15) !== 0)) {
	            this.state = 999;
	            this.expression();
	        }

	        this.state = 1002;
	        this.match(CParser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectionStatement() {
	    let localctx = new SelectionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CParser.RULE_selectionStatement);
	    try {
	        this.state = 1019;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1004;
	            this.match(CParser.If);
	            this.state = 1005;
	            this.match(CParser.LeftParen);
	            this.state = 1006;
	            this.expression();
	            this.state = 1007;
	            this.match(CParser.RightParen);
	            this.state = 1008;
	            this.statement();
	            this.state = 1011;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	            if(la_===1) {
	                this.state = 1009;
	                this.match(CParser.Else);
	                this.state = 1010;
	                this.statement();

	            }
	            break;
	        case 47:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1013;
	            this.match(CParser.Switch);
	            this.state = 1014;
	            this.match(CParser.LeftParen);
	            this.state = 1015;
	            this.expression();
	            this.state = 1016;
	            this.match(CParser.RightParen);
	            this.state = 1017;
	            this.statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterationStatement() {
	    let localctx = new IterationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CParser.RULE_iterationStatement);
	    try {
	        this.state = 1041;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 53:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1021;
	            this.match(CParser.While);
	            this.state = 1022;
	            this.match(CParser.LeftParen);
	            this.state = 1023;
	            this.expression();
	            this.state = 1024;
	            this.match(CParser.RightParen);
	            this.state = 1025;
	            this.statement();
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1027;
	            this.match(CParser.Do);
	            this.state = 1028;
	            this.statement();
	            this.state = 1029;
	            this.match(CParser.While);
	            this.state = 1030;
	            this.match(CParser.LeftParen);
	            this.state = 1031;
	            this.expression();
	            this.state = 1032;
	            this.match(CParser.RightParen);
	            this.state = 1033;
	            this.match(CParser.Semi);
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1035;
	            this.match(CParser.For);
	            this.state = 1036;
	            this.match(CParser.LeftParen);
	            this.state = 1037;
	            this.forCondition();
	            this.state = 1038;
	            this.match(CParser.RightParen);
	            this.state = 1039;
	            this.statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forCondition() {
	    let localctx = new ForConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CParser.RULE_forCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1047;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1043;
	            this.forDeclaration();
	            break;

	        case 2:
	            this.state = 1045;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 14) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1083393) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 12959) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 15) !== 0)) {
	                this.state = 1044;
	                this.expression();
	            }

	            break;

	        }
	        this.state = 1049;
	        this.match(CParser.Semi);
	        this.state = 1051;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 14) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1083393) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 12959) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 15) !== 0)) {
	            this.state = 1050;
	            this.forExpression();
	        }

	        this.state = 1053;
	        this.match(CParser.Semi);
	        this.state = 1055;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 14) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1083393) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 12959) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 15) !== 0)) {
	            this.state = 1054;
	            this.forExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forDeclaration() {
	    let localctx = new ForDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CParser.RULE_forDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1057;
	        this.declarationSpecifiers();
	        this.state = 1059;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 64000) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 8454145) !== 0) || _la===110) {
	            this.state = 1058;
	            this.initDeclaratorList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forExpression() {
	    let localctx = new ForExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CParser.RULE_forExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1061;
	        this.assignmentExpression();
	        this.state = 1066;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===93) {
	            this.state = 1062;
	            this.match(CParser.Comma);
	            this.state = 1063;
	            this.assignmentExpression();
	            this.state = 1068;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jumpStatement() {
	    let localctx = new JumpStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CParser.RULE_jumpStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1079;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1069;
	            this.match(CParser.Goto);
	            this.state = 1070;
	            this.match(CParser.Identifier);
	            break;

	        case 2:
	            this.state = 1071;
	            this.match(CParser.Continue);
	            break;

	        case 3:
	            this.state = 1072;
	            this.match(CParser.Break);
	            break;

	        case 4:
	            this.state = 1073;
	            this.match(CParser.Return);
	            this.state = 1075;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 14) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1083393) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 12959) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 15) !== 0)) {
	                this.state = 1074;
	                this.expression();
	            }

	            break;

	        case 5:
	            this.state = 1077;
	            this.match(CParser.Goto);
	            this.state = 1078;
	            this.unaryExpression();
	            break;

	        }
	        this.state = 1081;
	        this.match(CParser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compilationUnit() {
	    let localctx = new CompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CParser.RULE_compilationUnit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1084;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 1)) & ~0x1f) === 0 && ((1 << (_la - 1)) & 3905519609) !== 0) || ((((_la - 36)) & ~0x1f) === 0 && ((1 << (_la - 36)) & 511047391) !== 0) || ((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 1073746049) !== 0)) {
	            this.state = 1083;
	            this.translationUnit();
	        }

	        this.state = 1086;
	        this.match(CParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	translationUnit() {
	    let localctx = new TranslationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CParser.RULE_translationUnit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1089; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1088;
	            this.externalDeclaration();
	            this.state = 1091; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 1)) & ~0x1f) === 0 && ((1 << (_la - 1)) & 3905519609) !== 0) || ((((_la - 36)) & ~0x1f) === 0 && ((1 << (_la - 36)) & 511047391) !== 0) || ((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 1073746049) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalDeclaration() {
	    let localctx = new ExternalDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, CParser.RULE_externalDeclaration);
	    try {
	        this.state = 1096;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1093;
	            this.functionDefinition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1094;
	            this.declaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1095;
	            this.match(CParser.Semi);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDefinition() {
	    let localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, CParser.RULE_functionDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1099;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	        if(la_===1) {
	            this.state = 1098;
	            this.declarationSpecifiers();

	        }
	        this.state = 1101;
	        this.declarator();
	        this.state = 1103;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3516008434) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3881790961) !== 0) || _la===110) {
	            this.state = 1102;
	            this.declarationList();
	        }

	        this.state = 1105;
	        this.compoundStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationList() {
	    let localctx = new DeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, CParser.RULE_declarationList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1108; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1107;
	            this.declaration();
	            this.state = 1110; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3516008434) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3881790961) !== 0) || _la===110);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CParser.EOF = antlr4.Token.EOF;
CParser.T__0 = 1;
CParser.T__1 = 2;
CParser.T__2 = 3;
CParser.T__3 = 4;
CParser.T__4 = 5;
CParser.T__5 = 6;
CParser.T__6 = 7;
CParser.T__7 = 8;
CParser.T__8 = 9;
CParser.T__9 = 10;
CParser.T__10 = 11;
CParser.T__11 = 12;
CParser.T__12 = 13;
CParser.T__13 = 14;
CParser.T__14 = 15;
CParser.T__15 = 16;
CParser.T__16 = 17;
CParser.T__17 = 18;
CParser.T__18 = 19;
CParser.Auto = 20;
CParser.Break = 21;
CParser.Case = 22;
CParser.Char = 23;
CParser.Const = 24;
CParser.Continue = 25;
CParser.Default = 26;
CParser.Do = 27;
CParser.Double = 28;
CParser.Else = 29;
CParser.Enum = 30;
CParser.Extern = 31;
CParser.Float = 32;
CParser.For = 33;
CParser.Goto = 34;
CParser.If = 35;
CParser.Inline = 36;
CParser.Int = 37;
CParser.Long = 38;
CParser.Register = 39;
CParser.Restrict = 40;
CParser.Return = 41;
CParser.Short = 42;
CParser.Signed = 43;
CParser.Sizeof = 44;
CParser.Static = 45;
CParser.Struct = 46;
CParser.Switch = 47;
CParser.Typedef = 48;
CParser.Union = 49;
CParser.Unsigned = 50;
CParser.Void = 51;
CParser.Volatile = 52;
CParser.While = 53;
CParser.Alignas = 54;
CParser.Alignof = 55;
CParser.Atomic = 56;
CParser.Bool = 57;
CParser.Complex = 58;
CParser.Generic = 59;
CParser.Imaginary = 60;
CParser.Noreturn = 61;
CParser.StaticAssert = 62;
CParser.ThreadLocal = 63;
CParser.LeftParen = 64;
CParser.RightParen = 65;
CParser.LeftBracket = 66;
CParser.RightBracket = 67;
CParser.LeftBrace = 68;
CParser.RightBrace = 69;
CParser.Less = 70;
CParser.LessEqual = 71;
CParser.Greater = 72;
CParser.GreaterEqual = 73;
CParser.LeftShift = 74;
CParser.RightShift = 75;
CParser.Plus = 76;
CParser.PlusPlus = 77;
CParser.Minus = 78;
CParser.MinusMinus = 79;
CParser.Star = 80;
CParser.Div = 81;
CParser.Mod = 82;
CParser.And = 83;
CParser.Or = 84;
CParser.AndAnd = 85;
CParser.OrOr = 86;
CParser.Caret = 87;
CParser.Not = 88;
CParser.Tilde = 89;
CParser.Question = 90;
CParser.Colon = 91;
CParser.Semi = 92;
CParser.Comma = 93;
CParser.Assign = 94;
CParser.StarAssign = 95;
CParser.DivAssign = 96;
CParser.ModAssign = 97;
CParser.PlusAssign = 98;
CParser.MinusAssign = 99;
CParser.LeftShiftAssign = 100;
CParser.RightShiftAssign = 101;
CParser.AndAssign = 102;
CParser.XorAssign = 103;
CParser.OrAssign = 104;
CParser.Equal = 105;
CParser.NotEqual = 106;
CParser.Arrow = 107;
CParser.Dot = 108;
CParser.Ellipsis = 109;
CParser.Identifier = 110;
CParser.Constant = 111;
CParser.DigitSequence = 112;
CParser.StringLiteral = 113;
CParser.MultiLineMacro = 114;
CParser.Directive = 115;
CParser.AsmBlock = 116;
CParser.Whitespace = 117;
CParser.Newline = 118;
CParser.BlockComment = 119;
CParser.LineComment = 120;

CParser.RULE_primaryExpression = 0;
CParser.RULE_genericSelection = 1;
CParser.RULE_genericAssocList = 2;
CParser.RULE_genericAssociation = 3;
CParser.RULE_postfixExpression = 4;
CParser.RULE_argumentExpressionList = 5;
CParser.RULE_unaryExpression = 6;
CParser.RULE_unaryOperator = 7;
CParser.RULE_castExpression = 8;
CParser.RULE_multiplicativeExpression = 9;
CParser.RULE_additiveExpression = 10;
CParser.RULE_shiftExpression = 11;
CParser.RULE_relationalExpression = 12;
CParser.RULE_equalityExpression = 13;
CParser.RULE_andExpression = 14;
CParser.RULE_exclusiveOrExpression = 15;
CParser.RULE_inclusiveOrExpression = 16;
CParser.RULE_logicalAndExpression = 17;
CParser.RULE_logicalOrExpression = 18;
CParser.RULE_conditionalExpression = 19;
CParser.RULE_assignmentExpression = 20;
CParser.RULE_assignmentOperator = 21;
CParser.RULE_expression = 22;
CParser.RULE_constantExpression = 23;
CParser.RULE_declaration = 24;
CParser.RULE_declarationSpecifiers = 25;
CParser.RULE_declarationSpecifiers2 = 26;
CParser.RULE_declarationSpecifier = 27;
CParser.RULE_initDeclaratorList = 28;
CParser.RULE_initDeclarator = 29;
CParser.RULE_storageClassSpecifier = 30;
CParser.RULE_typeSpecifier = 31;
CParser.RULE_structOrUnionSpecifier = 32;
CParser.RULE_structOrUnion = 33;
CParser.RULE_structDeclarationList = 34;
CParser.RULE_structDeclaration = 35;
CParser.RULE_specifierQualifierList = 36;
CParser.RULE_structDeclaratorList = 37;
CParser.RULE_structDeclarator = 38;
CParser.RULE_enumSpecifier = 39;
CParser.RULE_enumeratorList = 40;
CParser.RULE_enumerator = 41;
CParser.RULE_enumerationConstant = 42;
CParser.RULE_atomicTypeSpecifier = 43;
CParser.RULE_typeQualifier = 44;
CParser.RULE_functionSpecifier = 45;
CParser.RULE_alignmentSpecifier = 46;
CParser.RULE_declarator = 47;
CParser.RULE_directDeclarator = 48;
CParser.RULE_vcSpecificModifer = 49;
CParser.RULE_gccDeclaratorExtension = 50;
CParser.RULE_gccAttributeSpecifier = 51;
CParser.RULE_gccAttributeList = 52;
CParser.RULE_gccAttribute = 53;
CParser.RULE_nestedParenthesesBlock = 54;
CParser.RULE_pointer = 55;
CParser.RULE_typeQualifierList = 56;
CParser.RULE_parameterTypeList = 57;
CParser.RULE_parameterList = 58;
CParser.RULE_parameterDeclaration = 59;
CParser.RULE_identifierList = 60;
CParser.RULE_typeName = 61;
CParser.RULE_abstractDeclarator = 62;
CParser.RULE_directAbstractDeclarator = 63;
CParser.RULE_typedefName = 64;
CParser.RULE_initializer = 65;
CParser.RULE_initializerList = 66;
CParser.RULE_designation = 67;
CParser.RULE_designatorList = 68;
CParser.RULE_designator = 69;
CParser.RULE_staticAssertDeclaration = 70;
CParser.RULE_statement = 71;
CParser.RULE_labeledStatement = 72;
CParser.RULE_compoundStatement = 73;
CParser.RULE_blockItemList = 74;
CParser.RULE_blockItem = 75;
CParser.RULE_expressionStatement = 76;
CParser.RULE_selectionStatement = 77;
CParser.RULE_iterationStatement = 78;
CParser.RULE_forCondition = 79;
CParser.RULE_forDeclaration = 80;
CParser.RULE_forExpression = 81;
CParser.RULE_jumpStatement = 82;
CParser.RULE_compilationUnit = 83;
CParser.RULE_translationUnit = 84;
CParser.RULE_externalDeclaration = 85;
CParser.RULE_functionDefinition = 86;
CParser.RULE_declarationList = 87;

class PrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_primaryExpression;
    }

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	Constant() {
	    return this.getToken(CParser.Constant, 0);
	};

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.StringLiteral);
	    } else {
	        return this.getToken(CParser.StringLiteral, i);
	    }
	};


	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	genericSelection() {
	    return this.getTypedRuleContext(GenericSelectionContext,0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitPrimaryExpression(this);
		}
	}


}



class GenericSelectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_genericSelection;
    }

	Generic() {
	    return this.getToken(CParser.Generic, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	genericAssocList() {
	    return this.getTypedRuleContext(GenericAssocListContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterGenericSelection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitGenericSelection(this);
		}
	}


}



class GenericAssocListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_genericAssocList;
    }

	genericAssociation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GenericAssociationContext);
	    } else {
	        return this.getTypedRuleContext(GenericAssociationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterGenericAssocList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitGenericAssocList(this);
		}
	}


}



class GenericAssociationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_genericAssociation;
    }

	Colon() {
	    return this.getToken(CParser.Colon, 0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	Default() {
	    return this.getToken(CParser.Default, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterGenericAssociation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitGenericAssociation(this);
		}
	}


}



class PostfixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_postfixExpression;
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	LeftParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.LeftParen);
	    } else {
	        return this.getToken(CParser.LeftParen, i);
	    }
	};


	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	RightParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.RightParen);
	    } else {
	        return this.getToken(CParser.RightParen, i);
	    }
	};


	LeftBrace() {
	    return this.getToken(CParser.LeftBrace, 0);
	};

	initializerList() {
	    return this.getTypedRuleContext(InitializerListContext,0);
	};

	RightBrace() {
	    return this.getToken(CParser.RightBrace, 0);
	};

	LeftBracket = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.LeftBracket);
	    } else {
	        return this.getToken(CParser.LeftBracket, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RightBracket = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.RightBracket);
	    } else {
	        return this.getToken(CParser.RightBracket, i);
	    }
	};


	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Identifier);
	    } else {
	        return this.getToken(CParser.Identifier, i);
	    }
	};


	PlusPlus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.PlusPlus);
	    } else {
	        return this.getToken(CParser.PlusPlus, i);
	    }
	};


	MinusMinus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.MinusMinus);
	    } else {
	        return this.getToken(CParser.MinusMinus, i);
	    }
	};


	Dot = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Dot);
	    } else {
	        return this.getToken(CParser.Dot, i);
	    }
	};


	Arrow = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Arrow);
	    } else {
	        return this.getToken(CParser.Arrow, i);
	    }
	};


	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	argumentExpressionList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentExpressionListContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentExpressionListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterPostfixExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitPostfixExpression(this);
		}
	}


}



class ArgumentExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_argumentExpressionList;
    }

	assignmentExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterArgumentExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitArgumentExpressionList(this);
		}
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_unaryExpression;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	unaryOperator() {
	    return this.getTypedRuleContext(UnaryOperatorContext,0);
	};

	castExpression() {
	    return this.getTypedRuleContext(CastExpressionContext,0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	AndAnd() {
	    return this.getToken(CParser.AndAnd, 0);
	};

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	Sizeof = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Sizeof);
	    } else {
	        return this.getToken(CParser.Sizeof, i);
	    }
	};


	Alignof() {
	    return this.getToken(CParser.Alignof, 0);
	};

	PlusPlus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.PlusPlus);
	    } else {
	        return this.getToken(CParser.PlusPlus, i);
	    }
	};


	MinusMinus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.MinusMinus);
	    } else {
	        return this.getToken(CParser.MinusMinus, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitUnaryExpression(this);
		}
	}


}



class UnaryOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_unaryOperator;
    }

	And() {
	    return this.getToken(CParser.And, 0);
	};

	Star() {
	    return this.getToken(CParser.Star, 0);
	};

	Plus() {
	    return this.getToken(CParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(CParser.Minus, 0);
	};

	Tilde() {
	    return this.getToken(CParser.Tilde, 0);
	};

	Not() {
	    return this.getToken(CParser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterUnaryOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitUnaryOperator(this);
		}
	}


}



class CastExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_castExpression;
    }

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	castExpression() {
	    return this.getTypedRuleContext(CastExpressionContext,0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	DigitSequence() {
	    return this.getToken(CParser.DigitSequence, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitCastExpression(this);
		}
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_multiplicativeExpression;
    }

	castExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CastExpressionContext);
	    } else {
	        return this.getTypedRuleContext(CastExpressionContext,i);
	    }
	};

	Star = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Star);
	    } else {
	        return this.getToken(CParser.Star, i);
	    }
	};


	Div = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Div);
	    } else {
	        return this.getToken(CParser.Div, i);
	    }
	};


	Mod = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Mod);
	    } else {
	        return this.getToken(CParser.Mod, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_additiveExpression;
    }

	multiplicativeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExpressionContext,i);
	    }
	};

	Plus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Plus);
	    } else {
	        return this.getToken(CParser.Plus, i);
	    }
	};


	Minus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Minus);
	    } else {
	        return this.getToken(CParser.Minus, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}


}



class ShiftExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_shiftExpression;
    }

	additiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExpressionContext,i);
	    }
	};

	LeftShift = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.LeftShift);
	    } else {
	        return this.getToken(CParser.LeftShift, i);
	    }
	};


	RightShift = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.RightShift);
	    } else {
	        return this.getToken(CParser.RightShift, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitShiftExpression(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_relationalExpression;
    }

	shiftExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ShiftExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ShiftExpressionContext,i);
	    }
	};

	Less = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Less);
	    } else {
	        return this.getToken(CParser.Less, i);
	    }
	};


	Greater = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Greater);
	    } else {
	        return this.getToken(CParser.Greater, i);
	    }
	};


	LessEqual = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.LessEqual);
	    } else {
	        return this.getToken(CParser.LessEqual, i);
	    }
	};


	GreaterEqual = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.GreaterEqual);
	    } else {
	        return this.getToken(CParser.GreaterEqual, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_equalityExpression;
    }

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	Equal = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Equal);
	    } else {
	        return this.getToken(CParser.Equal, i);
	    }
	};


	NotEqual = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.NotEqual);
	    } else {
	        return this.getToken(CParser.NotEqual, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitEqualityExpression(this);
		}
	}


}



class AndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_andExpression;
    }

	equalityExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EqualityExpressionContext);
	    } else {
	        return this.getTypedRuleContext(EqualityExpressionContext,i);
	    }
	};

	And = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.And);
	    } else {
	        return this.getToken(CParser.And, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitAndExpression(this);
		}
	}


}



class ExclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_exclusiveOrExpression;
    }

	andExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AndExpressionContext,i);
	    }
	};

	Caret = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Caret);
	    } else {
	        return this.getToken(CParser.Caret, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterExclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitExclusiveOrExpression(this);
		}
	}


}



class InclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_inclusiveOrExpression;
    }

	exclusiveOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExclusiveOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExclusiveOrExpressionContext,i);
	    }
	};

	Or = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Or);
	    } else {
	        return this.getToken(CParser.Or, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterInclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitInclusiveOrExpression(this);
		}
	}


}



class LogicalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_logicalAndExpression;
    }

	inclusiveOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InclusiveOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(InclusiveOrExpressionContext,i);
	    }
	};

	AndAnd = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.AndAnd);
	    } else {
	        return this.getToken(CParser.AndAnd, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitLogicalAndExpression(this);
		}
	}


}



class LogicalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_logicalOrExpression;
    }

	logicalAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LogicalAndExpressionContext,i);
	    }
	};

	OrOr = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.OrOr);
	    } else {
	        return this.getToken(CParser.OrOr, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitLogicalOrExpression(this);
		}
	}


}



class ConditionalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_conditionalExpression;
    }

	logicalOrExpression() {
	    return this.getTypedRuleContext(LogicalOrExpressionContext,0);
	};

	Question() {
	    return this.getToken(CParser.Question, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Colon() {
	    return this.getToken(CParser.Colon, 0);
	};

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterConditionalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitConditionalExpression(this);
		}
	}


}



class AssignmentExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_assignmentExpression;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	DigitSequence() {
	    return this.getToken(CParser.DigitSequence, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitAssignmentExpression(this);
		}
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_assignmentOperator;
    }

	Assign() {
	    return this.getToken(CParser.Assign, 0);
	};

	StarAssign() {
	    return this.getToken(CParser.StarAssign, 0);
	};

	DivAssign() {
	    return this.getToken(CParser.DivAssign, 0);
	};

	ModAssign() {
	    return this.getToken(CParser.ModAssign, 0);
	};

	PlusAssign() {
	    return this.getToken(CParser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(CParser.MinusAssign, 0);
	};

	LeftShiftAssign() {
	    return this.getToken(CParser.LeftShiftAssign, 0);
	};

	RightShiftAssign() {
	    return this.getToken(CParser.RightShiftAssign, 0);
	};

	AndAssign() {
	    return this.getToken(CParser.AndAssign, 0);
	};

	XorAssign() {
	    return this.getToken(CParser.XorAssign, 0);
	};

	OrAssign() {
	    return this.getToken(CParser.OrAssign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitAssignmentOperator(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_expression;
    }

	assignmentExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitExpression(this);
		}
	}


}



class ConstantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_constantExpression;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterConstantExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitConstantExpression(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_declaration;
    }

	declarationSpecifiers() {
	    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
	};

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	initDeclaratorList() {
	    return this.getTypedRuleContext(InitDeclaratorListContext,0);
	};

	staticAssertDeclaration() {
	    return this.getTypedRuleContext(StaticAssertDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDeclaration(this);
		}
	}


}



class DeclarationSpecifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_declarationSpecifiers;
    }

	declarationSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDeclarationSpecifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDeclarationSpecifiers(this);
		}
	}


}



class DeclarationSpecifiers2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_declarationSpecifiers2;
    }

	declarationSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDeclarationSpecifiers2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDeclarationSpecifiers2(this);
		}
	}


}



class DeclarationSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_declarationSpecifier;
    }

	storageClassSpecifier() {
	    return this.getTypedRuleContext(StorageClassSpecifierContext,0);
	};

	typeSpecifier() {
	    return this.getTypedRuleContext(TypeSpecifierContext,0);
	};

	typeQualifier() {
	    return this.getTypedRuleContext(TypeQualifierContext,0);
	};

	functionSpecifier() {
	    return this.getTypedRuleContext(FunctionSpecifierContext,0);
	};

	alignmentSpecifier() {
	    return this.getTypedRuleContext(AlignmentSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDeclarationSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDeclarationSpecifier(this);
		}
	}


}



class InitDeclaratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_initDeclaratorList;
    }

	initDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(InitDeclaratorContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterInitDeclaratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitInitDeclaratorList(this);
		}
	}


}



class InitDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_initDeclarator;
    }

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	Assign() {
	    return this.getToken(CParser.Assign, 0);
	};

	initializer() {
	    return this.getTypedRuleContext(InitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterInitDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitInitDeclarator(this);
		}
	}


}



class StorageClassSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_storageClassSpecifier;
    }

	Typedef() {
	    return this.getToken(CParser.Typedef, 0);
	};

	Extern() {
	    return this.getToken(CParser.Extern, 0);
	};

	Static() {
	    return this.getToken(CParser.Static, 0);
	};

	ThreadLocal() {
	    return this.getToken(CParser.ThreadLocal, 0);
	};

	Auto() {
	    return this.getToken(CParser.Auto, 0);
	};

	Register() {
	    return this.getToken(CParser.Register, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStorageClassSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStorageClassSpecifier(this);
		}
	}


}



class TypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_typeSpecifier;
    }

	Void() {
	    return this.getToken(CParser.Void, 0);
	};

	Char() {
	    return this.getToken(CParser.Char, 0);
	};

	Short() {
	    return this.getToken(CParser.Short, 0);
	};

	Int() {
	    return this.getToken(CParser.Int, 0);
	};

	Long() {
	    return this.getToken(CParser.Long, 0);
	};

	Float() {
	    return this.getToken(CParser.Float, 0);
	};

	Double() {
	    return this.getToken(CParser.Double, 0);
	};

	Signed() {
	    return this.getToken(CParser.Signed, 0);
	};

	Unsigned() {
	    return this.getToken(CParser.Unsigned, 0);
	};

	Bool() {
	    return this.getToken(CParser.Bool, 0);
	};

	Complex() {
	    return this.getToken(CParser.Complex, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	atomicTypeSpecifier() {
	    return this.getTypedRuleContext(AtomicTypeSpecifierContext,0);
	};

	structOrUnionSpecifier() {
	    return this.getTypedRuleContext(StructOrUnionSpecifierContext,0);
	};

	enumSpecifier() {
	    return this.getTypedRuleContext(EnumSpecifierContext,0);
	};

	typedefName() {
	    return this.getTypedRuleContext(TypedefNameContext,0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitTypeSpecifier(this);
		}
	}


}



class StructOrUnionSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_structOrUnionSpecifier;
    }

	structOrUnion() {
	    return this.getTypedRuleContext(StructOrUnionContext,0);
	};

	LeftBrace() {
	    return this.getToken(CParser.LeftBrace, 0);
	};

	structDeclarationList() {
	    return this.getTypedRuleContext(StructDeclarationListContext,0);
	};

	RightBrace() {
	    return this.getToken(CParser.RightBrace, 0);
	};

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStructOrUnionSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStructOrUnionSpecifier(this);
		}
	}


}



class StructOrUnionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_structOrUnion;
    }

	Struct() {
	    return this.getToken(CParser.Struct, 0);
	};

	Union() {
	    return this.getToken(CParser.Union, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStructOrUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStructOrUnion(this);
		}
	}


}



class StructDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_structDeclarationList;
    }

	structDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StructDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(StructDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStructDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStructDeclarationList(this);
		}
	}


}



class StructDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_structDeclaration;
    }

	specifierQualifierList() {
	    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
	};

	structDeclaratorList() {
	    return this.getTypedRuleContext(StructDeclaratorListContext,0);
	};

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	staticAssertDeclaration() {
	    return this.getTypedRuleContext(StaticAssertDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStructDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStructDeclaration(this);
		}
	}


}



class SpecifierQualifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_specifierQualifierList;
    }

	typeSpecifier() {
	    return this.getTypedRuleContext(TypeSpecifierContext,0);
	};

	typeQualifier() {
	    return this.getTypedRuleContext(TypeQualifierContext,0);
	};

	specifierQualifierList() {
	    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterSpecifierQualifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitSpecifierQualifierList(this);
		}
	}


}



class StructDeclaratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_structDeclaratorList;
    }

	structDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StructDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(StructDeclaratorContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStructDeclaratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStructDeclaratorList(this);
		}
	}


}



class StructDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_structDeclarator;
    }

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	Colon() {
	    return this.getToken(CParser.Colon, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStructDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStructDeclarator(this);
		}
	}


}



class EnumSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_enumSpecifier;
    }

	Enum() {
	    return this.getToken(CParser.Enum, 0);
	};

	LeftBrace() {
	    return this.getToken(CParser.LeftBrace, 0);
	};

	enumeratorList() {
	    return this.getTypedRuleContext(EnumeratorListContext,0);
	};

	RightBrace() {
	    return this.getToken(CParser.RightBrace, 0);
	};

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterEnumSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitEnumSpecifier(this);
		}
	}


}



class EnumeratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_enumeratorList;
    }

	enumerator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumeratorContext);
	    } else {
	        return this.getTypedRuleContext(EnumeratorContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterEnumeratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitEnumeratorList(this);
		}
	}


}



class EnumeratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_enumerator;
    }

	enumerationConstant() {
	    return this.getTypedRuleContext(EnumerationConstantContext,0);
	};

	Assign() {
	    return this.getToken(CParser.Assign, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterEnumerator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitEnumerator(this);
		}
	}


}



class EnumerationConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_enumerationConstant;
    }

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterEnumerationConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitEnumerationConstant(this);
		}
	}


}



class AtomicTypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_atomicTypeSpecifier;
    }

	Atomic() {
	    return this.getToken(CParser.Atomic, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterAtomicTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitAtomicTypeSpecifier(this);
		}
	}


}



class TypeQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_typeQualifier;
    }

	Const() {
	    return this.getToken(CParser.Const, 0);
	};

	Restrict() {
	    return this.getToken(CParser.Restrict, 0);
	};

	Volatile() {
	    return this.getToken(CParser.Volatile, 0);
	};

	Atomic() {
	    return this.getToken(CParser.Atomic, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterTypeQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitTypeQualifier(this);
		}
	}


}



class FunctionSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_functionSpecifier;
    }

	Inline() {
	    return this.getToken(CParser.Inline, 0);
	};

	Noreturn() {
	    return this.getToken(CParser.Noreturn, 0);
	};

	gccAttributeSpecifier() {
	    return this.getTypedRuleContext(GccAttributeSpecifierContext,0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterFunctionSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitFunctionSpecifier(this);
		}
	}


}



class AlignmentSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_alignmentSpecifier;
    }

	Alignas() {
	    return this.getToken(CParser.Alignas, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterAlignmentSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitAlignmentSpecifier(this);
		}
	}


}



class DeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_declarator;
    }

	directDeclarator() {
	    return this.getTypedRuleContext(DirectDeclaratorContext,0);
	};

	pointer() {
	    return this.getTypedRuleContext(PointerContext,0);
	};

	gccDeclaratorExtension = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GccDeclaratorExtensionContext);
	    } else {
	        return this.getTypedRuleContext(GccDeclaratorExtensionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDeclarator(this);
		}
	}


}



class DirectDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_directDeclarator;
    }

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	Colon() {
	    return this.getToken(CParser.Colon, 0);
	};

	DigitSequence() {
	    return this.getToken(CParser.DigitSequence, 0);
	};

	vcSpecificModifer() {
	    return this.getTypedRuleContext(VcSpecificModiferContext,0);
	};

	directDeclarator() {
	    return this.getTypedRuleContext(DirectDeclaratorContext,0);
	};

	LeftBracket() {
	    return this.getToken(CParser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CParser.RightBracket, 0);
	};

	typeQualifierList() {
	    return this.getTypedRuleContext(TypeQualifierListContext,0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	Static() {
	    return this.getToken(CParser.Static, 0);
	};

	Star() {
	    return this.getToken(CParser.Star, 0);
	};

	parameterTypeList() {
	    return this.getTypedRuleContext(ParameterTypeListContext,0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDirectDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDirectDeclarator(this);
		}
	}


}



class VcSpecificModiferContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_vcSpecificModifer;
    }


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterVcSpecificModifer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitVcSpecificModifer(this);
		}
	}


}



class GccDeclaratorExtensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_gccDeclaratorExtension;
    }

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.StringLiteral);
	    } else {
	        return this.getToken(CParser.StringLiteral, i);
	    }
	};


	gccAttributeSpecifier() {
	    return this.getTypedRuleContext(GccAttributeSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterGccDeclaratorExtension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitGccDeclaratorExtension(this);
		}
	}


}



class GccAttributeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_gccAttributeSpecifier;
    }

	LeftParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.LeftParen);
	    } else {
	        return this.getToken(CParser.LeftParen, i);
	    }
	};


	gccAttributeList() {
	    return this.getTypedRuleContext(GccAttributeListContext,0);
	};

	RightParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.RightParen);
	    } else {
	        return this.getToken(CParser.RightParen, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterGccAttributeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitGccAttributeSpecifier(this);
		}
	}


}



class GccAttributeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_gccAttributeList;
    }

	gccAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GccAttributeContext);
	    } else {
	        return this.getTypedRuleContext(GccAttributeContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterGccAttributeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitGccAttributeList(this);
		}
	}


}



class GccAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_gccAttribute;
    }

	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	LeftParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.LeftParen);
	    } else {
	        return this.getToken(CParser.LeftParen, i);
	    }
	};


	RightParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.RightParen);
	    } else {
	        return this.getToken(CParser.RightParen, i);
	    }
	};


	argumentExpressionList() {
	    return this.getTypedRuleContext(ArgumentExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterGccAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitGccAttribute(this);
		}
	}


}



class NestedParenthesesBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_nestedParenthesesBlock;
    }

	LeftParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.LeftParen);
	    } else {
	        return this.getToken(CParser.LeftParen, i);
	    }
	};


	nestedParenthesesBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NestedParenthesesBlockContext);
	    } else {
	        return this.getTypedRuleContext(NestedParenthesesBlockContext,i);
	    }
	};

	RightParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.RightParen);
	    } else {
	        return this.getToken(CParser.RightParen, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterNestedParenthesesBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitNestedParenthesesBlock(this);
		}
	}


}



class PointerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_pointer;
    }

	Star = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Star);
	    } else {
	        return this.getToken(CParser.Star, i);
	    }
	};


	Caret = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Caret);
	    } else {
	        return this.getToken(CParser.Caret, i);
	    }
	};


	typeQualifierList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeQualifierListContext);
	    } else {
	        return this.getTypedRuleContext(TypeQualifierListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterPointer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitPointer(this);
		}
	}


}



class TypeQualifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_typeQualifierList;
    }

	typeQualifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeQualifierContext);
	    } else {
	        return this.getTypedRuleContext(TypeQualifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterTypeQualifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitTypeQualifierList(this);
		}
	}


}



class ParameterTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_parameterTypeList;
    }

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	Ellipsis() {
	    return this.getToken(CParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterParameterTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitParameterTypeList(this);
		}
	}


}



class ParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_parameterList;
    }

	parameterDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ParameterDeclarationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitParameterList(this);
		}
	}


}



class ParameterDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_parameterDeclaration;
    }

	declarationSpecifiers() {
	    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
	};

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	declarationSpecifiers2() {
	    return this.getTypedRuleContext(DeclarationSpecifiers2Context,0);
	};

	abstractDeclarator() {
	    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterParameterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitParameterDeclaration(this);
		}
	}


}



class IdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_identifierList;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Identifier);
	    } else {
	        return this.getToken(CParser.Identifier, i);
	    }
	};


	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitIdentifierList(this);
		}
	}


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_typeName;
    }

	specifierQualifierList() {
	    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
	};

	abstractDeclarator() {
	    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitTypeName(this);
		}
	}


}



class AbstractDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_abstractDeclarator;
    }

	pointer() {
	    return this.getTypedRuleContext(PointerContext,0);
	};

	directAbstractDeclarator() {
	    return this.getTypedRuleContext(DirectAbstractDeclaratorContext,0);
	};

	gccDeclaratorExtension = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GccDeclaratorExtensionContext);
	    } else {
	        return this.getTypedRuleContext(GccDeclaratorExtensionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterAbstractDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitAbstractDeclarator(this);
		}
	}


}



class DirectAbstractDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_directAbstractDeclarator;
    }

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	abstractDeclarator() {
	    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	gccDeclaratorExtension = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GccDeclaratorExtensionContext);
	    } else {
	        return this.getTypedRuleContext(GccDeclaratorExtensionContext,i);
	    }
	};

	LeftBracket() {
	    return this.getToken(CParser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CParser.RightBracket, 0);
	};

	typeQualifierList() {
	    return this.getTypedRuleContext(TypeQualifierListContext,0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	Static() {
	    return this.getToken(CParser.Static, 0);
	};

	Star() {
	    return this.getToken(CParser.Star, 0);
	};

	parameterTypeList() {
	    return this.getTypedRuleContext(ParameterTypeListContext,0);
	};

	directAbstractDeclarator() {
	    return this.getTypedRuleContext(DirectAbstractDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDirectAbstractDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDirectAbstractDeclarator(this);
		}
	}


}



class TypedefNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_typedefName;
    }

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterTypedefName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitTypedefName(this);
		}
	}


}



class InitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_initializer;
    }

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	LeftBrace() {
	    return this.getToken(CParser.LeftBrace, 0);
	};

	initializerList() {
	    return this.getTypedRuleContext(InitializerListContext,0);
	};

	RightBrace() {
	    return this.getToken(CParser.RightBrace, 0);
	};

	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitInitializer(this);
		}
	}


}



class InitializerListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_initializerList;
    }

	initializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitializerContext);
	    } else {
	        return this.getTypedRuleContext(InitializerContext,i);
	    }
	};

	designation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DesignationContext);
	    } else {
	        return this.getTypedRuleContext(DesignationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterInitializerList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitInitializerList(this);
		}
	}


}



class DesignationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_designation;
    }

	designatorList() {
	    return this.getTypedRuleContext(DesignatorListContext,0);
	};

	Assign() {
	    return this.getToken(CParser.Assign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDesignation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDesignation(this);
		}
	}


}



class DesignatorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_designatorList;
    }

	designator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DesignatorContext);
	    } else {
	        return this.getTypedRuleContext(DesignatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDesignatorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDesignatorList(this);
		}
	}


}



class DesignatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_designator;
    }

	LeftBracket() {
	    return this.getToken(CParser.LeftBracket, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	RightBracket() {
	    return this.getToken(CParser.RightBracket, 0);
	};

	Dot() {
	    return this.getToken(CParser.Dot, 0);
	};

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDesignator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDesignator(this);
		}
	}


}



class StaticAssertDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_staticAssertDeclaration;
    }

	StaticAssert() {
	    return this.getToken(CParser.StaticAssert, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.StringLiteral);
	    } else {
	        return this.getToken(CParser.StringLiteral, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStaticAssertDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStaticAssertDeclaration(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_statement;
    }

	labeledStatement() {
	    return this.getTypedRuleContext(LabeledStatementContext,0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	selectionStatement() {
	    return this.getTypedRuleContext(SelectionStatementContext,0);
	};

	iterationStatement() {
	    return this.getTypedRuleContext(IterationStatementContext,0);
	};

	jumpStatement() {
	    return this.getTypedRuleContext(JumpStatementContext,0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	Volatile() {
	    return this.getToken(CParser.Volatile, 0);
	};

	logicalOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LogicalOrExpressionContext,i);
	    }
	};

	Colon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Colon);
	    } else {
	        return this.getToken(CParser.Colon, i);
	    }
	};


	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStatement(this);
		}
	}


}



class LabeledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_labeledStatement;
    }

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	Colon() {
	    return this.getToken(CParser.Colon, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Case() {
	    return this.getToken(CParser.Case, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	Default() {
	    return this.getToken(CParser.Default, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterLabeledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitLabeledStatement(this);
		}
	}


}



class CompoundStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_compoundStatement;
    }

	LeftBrace() {
	    return this.getToken(CParser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(CParser.RightBrace, 0);
	};

	blockItemList() {
	    return this.getTypedRuleContext(BlockItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterCompoundStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitCompoundStatement(this);
		}
	}


}



class BlockItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_blockItemList;
    }

	blockItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockItemContext);
	    } else {
	        return this.getTypedRuleContext(BlockItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterBlockItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitBlockItemList(this);
		}
	}


}



class BlockItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_blockItem;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterBlockItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitBlockItem(this);
		}
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_expressionStatement;
    }

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitExpressionStatement(this);
		}
	}


}



class SelectionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_selectionStatement;
    }

	If() {
	    return this.getToken(CParser.If, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	Else() {
	    return this.getToken(CParser.Else, 0);
	};

	Switch() {
	    return this.getToken(CParser.Switch, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterSelectionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitSelectionStatement(this);
		}
	}


}



class IterationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_iterationStatement;
    }

	While() {
	    return this.getToken(CParser.While, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Do() {
	    return this.getToken(CParser.Do, 0);
	};

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	For() {
	    return this.getToken(CParser.For, 0);
	};

	forCondition() {
	    return this.getTypedRuleContext(ForConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterIterationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitIterationStatement(this);
		}
	}


}



class ForConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_forCondition;
    }

	Semi = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Semi);
	    } else {
	        return this.getToken(CParser.Semi, i);
	    }
	};


	forDeclaration() {
	    return this.getTypedRuleContext(ForDeclarationContext,0);
	};

	forExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ForExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ForExpressionContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterForCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitForCondition(this);
		}
	}


}



class ForDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_forDeclaration;
    }

	declarationSpecifiers() {
	    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
	};

	initDeclaratorList() {
	    return this.getTypedRuleContext(InitDeclaratorListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterForDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitForDeclaration(this);
		}
	}


}



class ForExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_forExpression;
    }

	assignmentExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterForExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitForExpression(this);
		}
	}


}



class JumpStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_jumpStatement;
    }

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	Goto() {
	    return this.getToken(CParser.Goto, 0);
	};

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	Continue() {
	    return this.getToken(CParser.Continue, 0);
	};

	Break() {
	    return this.getToken(CParser.Break, 0);
	};

	Return() {
	    return this.getToken(CParser.Return, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterJumpStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitJumpStatement(this);
		}
	}


}



class CompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_compilationUnit;
    }

	EOF() {
	    return this.getToken(CParser.EOF, 0);
	};

	translationUnit() {
	    return this.getTypedRuleContext(TranslationUnitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterCompilationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitCompilationUnit(this);
		}
	}


}



class TranslationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_translationUnit;
    }

	externalDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExternalDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ExternalDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterTranslationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitTranslationUnit(this);
		}
	}


}



class ExternalDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_externalDeclaration;
    }

	functionDefinition() {
	    return this.getTypedRuleContext(FunctionDefinitionContext,0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterExternalDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitExternalDeclaration(this);
		}
	}


}



class FunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_functionDefinition;
    }

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	declarationSpecifiers() {
	    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
	};

	declarationList() {
	    return this.getTypedRuleContext(DeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterFunctionDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitFunctionDefinition(this);
		}
	}


}



class DeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_declarationList;
    }

	declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDeclarationList(this);
		}
	}


}




CParser.PrimaryExpressionContext = PrimaryExpressionContext; 
CParser.GenericSelectionContext = GenericSelectionContext; 
CParser.GenericAssocListContext = GenericAssocListContext; 
CParser.GenericAssociationContext = GenericAssociationContext; 
CParser.PostfixExpressionContext = PostfixExpressionContext; 
CParser.ArgumentExpressionListContext = ArgumentExpressionListContext; 
CParser.UnaryExpressionContext = UnaryExpressionContext; 
CParser.UnaryOperatorContext = UnaryOperatorContext; 
CParser.CastExpressionContext = CastExpressionContext; 
CParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
CParser.AdditiveExpressionContext = AdditiveExpressionContext; 
CParser.ShiftExpressionContext = ShiftExpressionContext; 
CParser.RelationalExpressionContext = RelationalExpressionContext; 
CParser.EqualityExpressionContext = EqualityExpressionContext; 
CParser.AndExpressionContext = AndExpressionContext; 
CParser.ExclusiveOrExpressionContext = ExclusiveOrExpressionContext; 
CParser.InclusiveOrExpressionContext = InclusiveOrExpressionContext; 
CParser.LogicalAndExpressionContext = LogicalAndExpressionContext; 
CParser.LogicalOrExpressionContext = LogicalOrExpressionContext; 
CParser.ConditionalExpressionContext = ConditionalExpressionContext; 
CParser.AssignmentExpressionContext = AssignmentExpressionContext; 
CParser.AssignmentOperatorContext = AssignmentOperatorContext; 
CParser.ExpressionContext = ExpressionContext; 
CParser.ConstantExpressionContext = ConstantExpressionContext; 
CParser.DeclarationContext = DeclarationContext; 
CParser.DeclarationSpecifiersContext = DeclarationSpecifiersContext; 
CParser.DeclarationSpecifiers2Context = DeclarationSpecifiers2Context; 
CParser.DeclarationSpecifierContext = DeclarationSpecifierContext; 
CParser.InitDeclaratorListContext = InitDeclaratorListContext; 
CParser.InitDeclaratorContext = InitDeclaratorContext; 
CParser.StorageClassSpecifierContext = StorageClassSpecifierContext; 
CParser.TypeSpecifierContext = TypeSpecifierContext; 
CParser.StructOrUnionSpecifierContext = StructOrUnionSpecifierContext; 
CParser.StructOrUnionContext = StructOrUnionContext; 
CParser.StructDeclarationListContext = StructDeclarationListContext; 
CParser.StructDeclarationContext = StructDeclarationContext; 
CParser.SpecifierQualifierListContext = SpecifierQualifierListContext; 
CParser.StructDeclaratorListContext = StructDeclaratorListContext; 
CParser.StructDeclaratorContext = StructDeclaratorContext; 
CParser.EnumSpecifierContext = EnumSpecifierContext; 
CParser.EnumeratorListContext = EnumeratorListContext; 
CParser.EnumeratorContext = EnumeratorContext; 
CParser.EnumerationConstantContext = EnumerationConstantContext; 
CParser.AtomicTypeSpecifierContext = AtomicTypeSpecifierContext; 
CParser.TypeQualifierContext = TypeQualifierContext; 
CParser.FunctionSpecifierContext = FunctionSpecifierContext; 
CParser.AlignmentSpecifierContext = AlignmentSpecifierContext; 
CParser.DeclaratorContext = DeclaratorContext; 
CParser.DirectDeclaratorContext = DirectDeclaratorContext; 
CParser.VcSpecificModiferContext = VcSpecificModiferContext; 
CParser.GccDeclaratorExtensionContext = GccDeclaratorExtensionContext; 
CParser.GccAttributeSpecifierContext = GccAttributeSpecifierContext; 
CParser.GccAttributeListContext = GccAttributeListContext; 
CParser.GccAttributeContext = GccAttributeContext; 
CParser.NestedParenthesesBlockContext = NestedParenthesesBlockContext; 
CParser.PointerContext = PointerContext; 
CParser.TypeQualifierListContext = TypeQualifierListContext; 
CParser.ParameterTypeListContext = ParameterTypeListContext; 
CParser.ParameterListContext = ParameterListContext; 
CParser.ParameterDeclarationContext = ParameterDeclarationContext; 
CParser.IdentifierListContext = IdentifierListContext; 
CParser.TypeNameContext = TypeNameContext; 
CParser.AbstractDeclaratorContext = AbstractDeclaratorContext; 
CParser.DirectAbstractDeclaratorContext = DirectAbstractDeclaratorContext; 
CParser.TypedefNameContext = TypedefNameContext; 
CParser.InitializerContext = InitializerContext; 
CParser.InitializerListContext = InitializerListContext; 
CParser.DesignationContext = DesignationContext; 
CParser.DesignatorListContext = DesignatorListContext; 
CParser.DesignatorContext = DesignatorContext; 
CParser.StaticAssertDeclarationContext = StaticAssertDeclarationContext; 
CParser.StatementContext = StatementContext; 
CParser.LabeledStatementContext = LabeledStatementContext; 
CParser.CompoundStatementContext = CompoundStatementContext; 
CParser.BlockItemListContext = BlockItemListContext; 
CParser.BlockItemContext = BlockItemContext; 
CParser.ExpressionStatementContext = ExpressionStatementContext; 
CParser.SelectionStatementContext = SelectionStatementContext; 
CParser.IterationStatementContext = IterationStatementContext; 
CParser.ForConditionContext = ForConditionContext; 
CParser.ForDeclarationContext = ForDeclarationContext; 
CParser.ForExpressionContext = ForExpressionContext; 
CParser.JumpStatementContext = JumpStatementContext; 
CParser.CompilationUnitContext = CompilationUnitContext; 
CParser.TranslationUnitContext = TranslationUnitContext; 
CParser.ExternalDeclarationContext = ExternalDeclarationContext; 
CParser.FunctionDefinitionContext = FunctionDefinitionContext; 
CParser.DeclarationListContext = DeclarationListContext; 
